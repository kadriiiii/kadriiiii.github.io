{
  "openapi": "3.0.0",
  "info": {
    "title": "Platform Rules",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.salemove.com",
      "description": "Glia REST API base URL"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/sites/{site_id}/platform_rules": {
      "post": {
        "summary": "Create rule",
        "tags": [
          "Platform rules"
        ],
        "description": "Create a platform rule for a given site.\n\nPlatform rules define a list of event sources that will trigger a list of actions, in case a list of conditions\nare met.\n\nThe user creating a platform rule must have at least super manager role on the given site.\n",
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "site_id",
            "description": "ID of the site.",
            "schema": {
              "type": "string"
            },
            "example": "31a3f2ea-4473-4519-8f9e-a33cc6a48a74"
          }
        ],
        "requestBody": {
          "description": "Platform rule's properties.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Platform rule name.",
                        "example": "My platform rule"
                      },
                      "enabled": {
                        "type": "boolean",
                        "description": "Determines whether the platform rule is enabled.",
                        "example": true
                      },
                      "sources": {
                        "type": "array",
                        "minItems": 1,
                        "description": "A set of sources of a platform rule event.\n",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "title": "No visitor message",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "no_visitor_message"
                                  ],
                                  "description": "Type of the source event.\n\n* `no_visitor_message` - The visitor didn't send a message in the last `threshold` seconds.\n",
                                  "example": "no_visitor_message"
                                },
                                "threshold": {
                                  "type": "integer",
                                  "description": "The number of seconds the visitor has not sent any messages. Must be in the range of 10 to 43200.\n",
                                  "minimum": 10,
                                  "maximum": 43200,
                                  "example": 300
                                }
                              },
                              "required": [
                                "type",
                                "threshold"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "Reactive request is pending",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "reactive_request_pending"
                                  ],
                                  "description": "Type of the source event.\n\n* `reactive_request_pending` - A reactive engagement, transfer or\njoin request has been pending for a number of seconds.\n",
                                  "example": "reactive_request_pending"
                                },
                                "threshold": {
                                  "type": "integer",
                                  "description": "Number of seconds that defines for how long the request has been pending for the platform rule to trigger. Must be in the range of 0 to 60.\n",
                                  "minimum": 0,
                                  "maximum": 60,
                                  "example": 3
                                }
                              },
                              "required": [
                                "type",
                                "threshold"
                              ]
                            }
                          ]
                        }
                      },
                      "conditions": {
                        "type": "array",
                        "minItems": 0,
                        "description": "A set of conditions that regulates the triggering of the platform rule.\n",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "title": "Visitor media type",
                              "required": [
                                "type",
                                "media_type"
                              ],
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "visitor_media_type"
                                  ],
                                  "description": "Either the visitorâ€™s highest media type (in case source event `no_visitor_message`) or requested media type (in case of source event `reactive_request_pending`) is one of the media types listed in `media_type` array.\n",
                                  "example": "visitor_media_type"
                                },
                                "media_type": {
                                  "type": "array",
                                  "description": "Media types associated with the condition.",
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "text"
                                    ]
                                  },
                                  "example": [
                                    "text"
                                  ]
                                }
                              }
                            },
                            {
                              "type": "object",
                              "title": "From queues",
                              "required": [
                                "type",
                                "queue_ids"
                              ],
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "from_queues"
                                  ],
                                  "description": "Either the engagement leg (in case source event `no_visitor_message`) or reactive request (in case of source event `reactive_request_pending`) is from a queue listed in `queue_ids` array.\n",
                                  "example": "from_queues"
                                },
                                "queue_ids": {
                                  "type": "array",
                                  "description": "The queue IDs associated with the condition.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "d290f1ee-6c54-4b01-90e6-d701748f0851",
                                    "c3753f72-fcfe-4b4d-b91e-b48f46d149f9"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "actions": {
                        "type": "array",
                        "minItems": 1,
                        "description": "A set of actions that are triggered when the platform rule's conditions are met and the source events occur.\n",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "title": "End engagement",
                              "required": [
                                "type"
                              ],
                              "properties": {
                                "type": {
                                  "description": "End the current engagement.\n\nThis action is valid in context of the following sources: `no_visitor_message`.\n",
                                  "type": "string",
                                  "enum": [
                                    "end_engagement"
                                  ],
                                  "example": "end_engagement"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "title": "Send chat message",
                              "required": [
                                "type",
                                "message"
                              ],
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "send_chat_message"
                                  ],
                                  "description": "Send chat message to the recipient.\n\nThis action is valid in context of the following sources: `no_visitor_message`.\n",
                                  "example": "send_chat_message"
                                },
                                "message": {
                                  "example": {
                                    "content": "What are you interested in?",
                                    "attachment": {
                                      "type": "single_choice",
                                      "image_url": "https://example.com/images/site_logo.jpeg",
                                      "options": [
                                        {
                                          "text": "Car suppliers.",
                                          "value": "cars"
                                        },
                                        {
                                          "text": "Insurance companies.",
                                          "value": "insurance"
                                        }
                                      ]
                                    },
                                    "metadata": {
                                      "customer_id": 9876542,
                                      "customer_name": "Lorem Ipsum"
                                    }
                                  },
                                  "description": "A message to the recipient.\n\n* `message` can either be a string or an object containing additional properties.\n",
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "title": "Text message",
                                      "description": "A textual message that sender wishes to send to the recipient.\n",
                                      "example": "Is there anything I can help you with?"
                                    },
                                    {
                                      "type": "object",
                                      "title": "JSON message",
                                      "required": [
                                        "content"
                                      ],
                                      "properties": {
                                        "content": {
                                          "type": "string",
                                          "description": "A textual part of the message that the sender wishes to send to the recipient.\n",
                                          "example": "Is there anything I can help you with?"
                                        },
                                        "type": {
                                          "type": "string",
                                          "description": "Chat message type.",
                                          "default": "chat",
                                          "enum": [
                                            "chat"
                                          ],
                                          "example": "chat"
                                        },
                                        "attachment": {
                                          "description": "Chat message attachment.\n",
                                          "title": "Single choice",
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "description": "Type of an attachment.\n\nTo present the user with the list of options to make a simplified decision for the next interaction, type must\nbe `single_choice`. Selected option will be sent back to the other party as a regular chat message containing\nsingle choice response attachment.\n",
                                              "enum": [
                                                "single_choice"
                                              ]
                                            },
                                            "options": {
                                              "type": "array",
                                              "description": "A list of all available choices for the user to choose from.\n",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "description": "Text displayed to user as a choice label.",
                                                    "example": "I'm interested in insurance policies."
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "description": "Value of the choice sent as a response on user interaction.",
                                                    "example": "insurance"
                                                  }
                                                },
                                                "required": [
                                                  "text",
                                                  "value"
                                                ]
                                              }
                                            },
                                            "image_url": {
                                              "type": "string",
                                              "description": "URL of an image displayed on top of the choices expressing clear intent of the cards.\n",
                                              "example": "https://example.com/files/image.png"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "options"
                                          ]
                                        },
                                        "metadata": {
                                          "type": "object",
                                          "description": "Chat message metadata allows an integrator to add end to end\ndata inside a JSON object.\n\nThis information is only relevant\nto the integrator and will be handled transparently inside\nGlia.\n\nChat message metadata is an optional property of type JSON\nobject specified by the integrator. Any JSON object is\nallowed.\n",
                                          "additionalProperties": {
                                            "type": "object"
                                          },
                                          "example": {
                                            "custom_card_type": "insurance",
                                            "customer_number": "C123456789",
                                            "age": 33
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "object",
                              "title": "Accept request",
                              "required": [
                                "type"
                              ],
                              "properties": {
                                "type": {
                                  "description": "Accepts the reactive engagement, transfer or join request.\n\nThis action is valid in context of the following sources: `reactive_request_pending`.\n",
                                  "type": "string",
                                  "enum": [
                                    "accept_request"
                                  ],
                                  "example": "accept_request"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "required": [
                      "name",
                      "enabled",
                      "sources",
                      "actions"
                    ]
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The platform rule is successfully created. Returns the properties of the created platform rule.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Platform rule name.",
                          "example": "My platform rule"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Determines whether the platform rule is enabled.",
                          "example": true
                        },
                        "sources": {
                          "type": "array",
                          "minItems": 1,
                          "description": "A set of sources of a platform rule event.\n",
                          "items": {
                            "anyOf": [
                              {
                                "type": "object",
                                "title": "No visitor message",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "no_visitor_message"
                                    ],
                                    "description": "Type of the source event.\n\n* `no_visitor_message` - The visitor didn't send a message in the last `threshold` seconds.\n",
                                    "example": "no_visitor_message"
                                  },
                                  "threshold": {
                                    "type": "integer",
                                    "description": "The number of seconds the visitor has not sent any messages. Must be in the range of 10 to 43200.\n",
                                    "minimum": 10,
                                    "maximum": 43200,
                                    "example": 300
                                  }
                                },
                                "required": [
                                  "type",
                                  "threshold"
                                ]
                              },
                              {
                                "type": "object",
                                "title": "Reactive request is pending",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "reactive_request_pending"
                                    ],
                                    "description": "Type of the source event.\n\n* `reactive_request_pending` - A reactive engagement, transfer or\njoin request has been pending for a number of seconds.\n",
                                    "example": "reactive_request_pending"
                                  },
                                  "threshold": {
                                    "type": "integer",
                                    "description": "Number of seconds that defines for how long the request has been pending for the platform rule to trigger. Must be in the range of 0 to 60.\n",
                                    "minimum": 0,
                                    "maximum": 60,
                                    "example": 3
                                  }
                                },
                                "required": [
                                  "type",
                                  "threshold"
                                ]
                              }
                            ]
                          }
                        },
                        "conditions": {
                          "type": "array",
                          "minItems": 0,
                          "description": "A set of conditions that regulates the triggering of the platform rule.\n",
                          "items": {
                            "anyOf": [
                              {
                                "type": "object",
                                "title": "Visitor media type",
                                "required": [
                                  "type",
                                  "media_type"
                                ],
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "visitor_media_type"
                                    ],
                                    "description": "Either the visitorâ€™s highest media type (in case source event `no_visitor_message`) or requested media type (in case of source event `reactive_request_pending`) is one of the media types listed in `media_type` array.\n",
                                    "example": "visitor_media_type"
                                  },
                                  "media_type": {
                                    "type": "array",
                                    "description": "Media types associated with the condition.",
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "text"
                                      ]
                                    },
                                    "example": [
                                      "text"
                                    ]
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "title": "From queues",
                                "required": [
                                  "type",
                                  "queue_ids"
                                ],
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "from_queues"
                                    ],
                                    "description": "Either the engagement leg (in case source event `no_visitor_message`) or reactive request (in case of source event `reactive_request_pending`) is from a queue listed in `queue_ids` array.\n",
                                    "example": "from_queues"
                                  },
                                  "queue_ids": {
                                    "type": "array",
                                    "description": "The queue IDs associated with the condition.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "example": [
                                      "d290f1ee-6c54-4b01-90e6-d701748f0851",
                                      "c3753f72-fcfe-4b4d-b91e-b48f46d149f9"
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "actions": {
                          "type": "array",
                          "minItems": 1,
                          "description": "A set of actions that are triggered when the platform rule's conditions are met and the source events occur.\n",
                          "items": {
                            "anyOf": [
                              {
                                "type": "object",
                                "title": "End engagement",
                                "required": [
                                  "type"
                                ],
                                "properties": {
                                  "type": {
                                    "description": "End the current engagement.\n\nThis action is valid in context of the following sources: `no_visitor_message`.\n",
                                    "type": "string",
                                    "enum": [
                                      "end_engagement"
                                    ],
                                    "example": "end_engagement"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "title": "Send chat message",
                                "required": [
                                  "type",
                                  "message"
                                ],
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "send_chat_message"
                                    ],
                                    "description": "Send chat message to the recipient.\n\nThis action is valid in context of the following sources: `no_visitor_message`.\n",
                                    "example": "send_chat_message"
                                  },
                                  "message": {
                                    "example": {
                                      "content": "What are you interested in?",
                                      "attachment": {
                                        "type": "single_choice",
                                        "image_url": "https://example.com/images/site_logo.jpeg",
                                        "options": [
                                          {
                                            "text": "Car suppliers.",
                                            "value": "cars"
                                          },
                                          {
                                            "text": "Insurance companies.",
                                            "value": "insurance"
                                          }
                                        ]
                                      },
                                      "metadata": {
                                        "customer_id": 9876542,
                                        "customer_name": "Lorem Ipsum"
                                      }
                                    },
                                    "description": "A message to the recipient.\n\n* `message` can either be a string or an object containing additional properties.\n",
                                    "oneOf": [
                                      {
                                        "type": "string",
                                        "title": "Text message",
                                        "description": "A textual message that sender wishes to send to the recipient.\n",
                                        "example": "Is there anything I can help you with?"
                                      },
                                      {
                                        "type": "object",
                                        "title": "JSON message",
                                        "required": [
                                          "content"
                                        ],
                                        "properties": {
                                          "content": {
                                            "type": "string",
                                            "description": "A textual part of the message that the sender wishes to send to the recipient.\n",
                                            "example": "Is there anything I can help you with?"
                                          },
                                          "type": {
                                            "type": "string",
                                            "description": "Chat message type.",
                                            "default": "chat",
                                            "enum": [
                                              "chat"
                                            ],
                                            "example": "chat"
                                          },
                                          "attachment": {
                                            "description": "Chat message attachment.\n",
                                            "title": "Single choice",
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "description": "Type of an attachment.\n\nTo present the user with the list of options to make a simplified decision for the next interaction, type must\nbe `single_choice`. Selected option will be sent back to the other party as a regular chat message containing\nsingle choice response attachment.\n",
                                                "enum": [
                                                  "single_choice"
                                                ]
                                              },
                                              "options": {
                                                "type": "array",
                                                "description": "A list of all available choices for the user to choose from.\n",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "description": "Text displayed to user as a choice label.",
                                                      "example": "I'm interested in insurance policies."
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value of the choice sent as a response on user interaction.",
                                                      "example": "insurance"
                                                    }
                                                  },
                                                  "required": [
                                                    "text",
                                                    "value"
                                                  ]
                                                }
                                              },
                                              "image_url": {
                                                "type": "string",
                                                "description": "URL of an image displayed on top of the choices expressing clear intent of the cards.\n",
                                                "example": "https://example.com/files/image.png"
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "options"
                                            ]
                                          },
                                          "metadata": {
                                            "type": "object",
                                            "description": "Chat message metadata allows an integrator to add end to end\ndata inside a JSON object.\n\nThis information is only relevant\nto the integrator and will be handled transparently inside\nGlia.\n\nChat message metadata is an optional property of type JSON\nobject specified by the integrator. Any JSON object is\nallowed.\n",
                                            "additionalProperties": {
                                              "type": "object"
                                            },
                                            "example": {
                                              "custom_card_type": "insurance",
                                              "customer_number": "C123456789",
                                              "age": 33
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "title": "Accept request",
                                "required": [
                                  "type"
                                ],
                                "properties": {
                                  "type": {
                                    "description": "Accepts the reactive engagement, transfer or join request.\n\nThis action is valid in context of the following sources: `reactive_request_pending`.\n",
                                    "type": "string",
                                    "enum": [
                                      "accept_request"
                                    ],
                                    "example": "accept_request"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique ID of the platform rule. This is automatically generated when creating a rule and cannot be modified.",
                          "example": "e299da7b-22ec-4e4f-b541-a896bba587df"
                        },
                        "created_by": {
                          "type": "string",
                          "description": "ID of the operator that created the platform rule.",
                          "example": "6fd3ba96-5c1f-4404-84ad-ceaf54dd0dcc"
                        },
                        "updated_by": {
                          "type": "string",
                          "description": "ID of the operator that most recently updated the platform rule. It is set automatically on update.",
                          "example": "6fd3ba96-5c1f-4404-84ad-ceaf54dd0dcc"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "An ISO-8601 timestamp of when the platform rule was created.",
                          "example": "2019-06-04T07:55:42.000Z"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "An ISO-8601 timestamp of when the platform rule was updated.",
                          "example": "2019-06-04T07:55:42.000Z"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Please check for input errors (e.g., malformed request syntax)."
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Your bearer token is valid but you have no access to the requested resource.\n"
          },
          "500": {
            "description": "Internal server error has occurred. Please try again later."
          }
        }
      },
      "get": {
        "summary": "List rules",
        "tags": [
          "Platform rules"
        ],
        "description": "Fetch list of platform rules for a given site.\n\nThe user fetching a list of platform rules must have at least super manager role on the given site.\n",
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "site_id",
            "description": "ID of the site.",
            "schema": {
              "type": "string"
            },
            "example": "31a3f2ea-4473-4519-8f9e-a33cc6a48a74"
          }
        ],
        "responses": {
          "200": {
            "description": "Platform rules successfully fetched.",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "rules": {
                      "type": "array",
                      "description": "A list of rules for a given site.",
                      "items": {
                        "type": "object",
                        "allOf": [
                          {
                            "properties": {
                              "name": {
                                "type": "string",
                                "description": "Platform rule name.",
                                "example": "My platform rule"
                              },
                              "enabled": {
                                "type": "boolean",
                                "description": "Determines whether the platform rule is enabled.",
                                "example": true
                              },
                              "sources": {
                                "type": "array",
                                "minItems": 1,
                                "description": "A set of sources of a platform rule event.\n",
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "title": "No visitor message",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "no_visitor_message"
                                          ],
                                          "description": "Type of the source event.\n\n* `no_visitor_message` - The visitor didn't send a message in the last `threshold` seconds.\n",
                                          "example": "no_visitor_message"
                                        },
                                        "threshold": {
                                          "type": "integer",
                                          "description": "The number of seconds the visitor has not sent any messages. Must be in the range of 10 to 43200.\n",
                                          "minimum": 10,
                                          "maximum": 43200,
                                          "example": 300
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "threshold"
                                      ]
                                    },
                                    {
                                      "type": "object",
                                      "title": "Reactive request is pending",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "reactive_request_pending"
                                          ],
                                          "description": "Type of the source event.\n\n* `reactive_request_pending` - A reactive engagement, transfer or\njoin request has been pending for a number of seconds.\n",
                                          "example": "reactive_request_pending"
                                        },
                                        "threshold": {
                                          "type": "integer",
                                          "description": "Number of seconds that defines for how long the request has been pending for the platform rule to trigger. Must be in the range of 0 to 60.\n",
                                          "minimum": 0,
                                          "maximum": 60,
                                          "example": 3
                                        }
                                      },
                                      "required": [
                                        "type",
                                        "threshold"
                                      ]
                                    }
                                  ]
                                }
                              },
                              "conditions": {
                                "type": "array",
                                "minItems": 0,
                                "description": "A set of conditions that regulates the triggering of the platform rule.\n",
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "title": "Visitor media type",
                                      "required": [
                                        "type",
                                        "media_type"
                                      ],
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "visitor_media_type"
                                          ],
                                          "description": "Either the visitorâ€™s highest media type (in case source event `no_visitor_message`) or requested media type (in case of source event `reactive_request_pending`) is one of the media types listed in `media_type` array.\n",
                                          "example": "visitor_media_type"
                                        },
                                        "media_type": {
                                          "type": "array",
                                          "description": "Media types associated with the condition.",
                                          "items": {
                                            "type": "string",
                                            "enum": [
                                              "text"
                                            ]
                                          },
                                          "example": [
                                            "text"
                                          ]
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "From queues",
                                      "required": [
                                        "type",
                                        "queue_ids"
                                      ],
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "from_queues"
                                          ],
                                          "description": "Either the engagement leg (in case source event `no_visitor_message`) or reactive request (in case of source event `reactive_request_pending`) is from a queue listed in `queue_ids` array.\n",
                                          "example": "from_queues"
                                        },
                                        "queue_ids": {
                                          "type": "array",
                                          "description": "The queue IDs associated with the condition.",
                                          "items": {
                                            "type": "string"
                                          },
                                          "example": [
                                            "d290f1ee-6c54-4b01-90e6-d701748f0851",
                                            "c3753f72-fcfe-4b4d-b91e-b48f46d149f9"
                                          ]
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "actions": {
                                "type": "array",
                                "minItems": 1,
                                "description": "A set of actions that are triggered when the platform rule's conditions are met and the source events occur.\n",
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "object",
                                      "title": "End engagement",
                                      "required": [
                                        "type"
                                      ],
                                      "properties": {
                                        "type": {
                                          "description": "End the current engagement.\n\nThis action is valid in context of the following sources: `no_visitor_message`.\n",
                                          "type": "string",
                                          "enum": [
                                            "end_engagement"
                                          ],
                                          "example": "end_engagement"
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Send chat message",
                                      "required": [
                                        "type",
                                        "message"
                                      ],
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "enum": [
                                            "send_chat_message"
                                          ],
                                          "description": "Send chat message to the recipient.\n\nThis action is valid in context of the following sources: `no_visitor_message`.\n",
                                          "example": "send_chat_message"
                                        },
                                        "message": {
                                          "example": {
                                            "content": "What are you interested in?",
                                            "attachment": {
                                              "type": "single_choice",
                                              "image_url": "https://example.com/images/site_logo.jpeg",
                                              "options": [
                                                {
                                                  "text": "Car suppliers.",
                                                  "value": "cars"
                                                },
                                                {
                                                  "text": "Insurance companies.",
                                                  "value": "insurance"
                                                }
                                              ]
                                            },
                                            "metadata": {
                                              "customer_id": 9876542,
                                              "customer_name": "Lorem Ipsum"
                                            }
                                          },
                                          "description": "A message to the recipient.\n\n* `message` can either be a string or an object containing additional properties.\n",
                                          "oneOf": [
                                            {
                                              "type": "string",
                                              "title": "Text message",
                                              "description": "A textual message that sender wishes to send to the recipient.\n",
                                              "example": "Is there anything I can help you with?"
                                            },
                                            {
                                              "type": "object",
                                              "title": "JSON message",
                                              "required": [
                                                "content"
                                              ],
                                              "properties": {
                                                "content": {
                                                  "type": "string",
                                                  "description": "A textual part of the message that the sender wishes to send to the recipient.\n",
                                                  "example": "Is there anything I can help you with?"
                                                },
                                                "type": {
                                                  "type": "string",
                                                  "description": "Chat message type.",
                                                  "default": "chat",
                                                  "enum": [
                                                    "chat"
                                                  ],
                                                  "example": "chat"
                                                },
                                                "attachment": {
                                                  "description": "Chat message attachment.\n",
                                                  "title": "Single choice",
                                                  "type": "object",
                                                  "properties": {
                                                    "type": {
                                                      "type": "string",
                                                      "description": "Type of an attachment.\n\nTo present the user with the list of options to make a simplified decision for the next interaction, type must\nbe `single_choice`. Selected option will be sent back to the other party as a regular chat message containing\nsingle choice response attachment.\n",
                                                      "enum": [
                                                        "single_choice"
                                                      ]
                                                    },
                                                    "options": {
                                                      "type": "array",
                                                      "description": "A list of all available choices for the user to choose from.\n",
                                                      "items": {
                                                        "type": "object",
                                                        "properties": {
                                                          "text": {
                                                            "type": "string",
                                                            "description": "Text displayed to user as a choice label.",
                                                            "example": "I'm interested in insurance policies."
                                                          },
                                                          "value": {
                                                            "type": "string",
                                                            "description": "Value of the choice sent as a response on user interaction.",
                                                            "example": "insurance"
                                                          }
                                                        },
                                                        "required": [
                                                          "text",
                                                          "value"
                                                        ]
                                                      }
                                                    },
                                                    "image_url": {
                                                      "type": "string",
                                                      "description": "URL of an image displayed on top of the choices expressing clear intent of the cards.\n",
                                                      "example": "https://example.com/files/image.png"
                                                    }
                                                  },
                                                  "required": [
                                                    "type",
                                                    "options"
                                                  ]
                                                },
                                                "metadata": {
                                                  "type": "object",
                                                  "description": "Chat message metadata allows an integrator to add end to end\ndata inside a JSON object.\n\nThis information is only relevant\nto the integrator and will be handled transparently inside\nGlia.\n\nChat message metadata is an optional property of type JSON\nobject specified by the integrator. Any JSON object is\nallowed.\n",
                                                  "additionalProperties": {
                                                    "type": "object"
                                                  },
                                                  "example": {
                                                    "custom_card_type": "insurance",
                                                    "customer_number": "C123456789",
                                                    "age": 33
                                                  }
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      }
                                    },
                                    {
                                      "type": "object",
                                      "title": "Accept request",
                                      "required": [
                                        "type"
                                      ],
                                      "properties": {
                                        "type": {
                                          "description": "Accepts the reactive engagement, transfer or join request.\n\nThis action is valid in context of the following sources: `reactive_request_pending`.\n",
                                          "type": "string",
                                          "enum": [
                                            "accept_request"
                                          ],
                                          "example": "accept_request"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            }
                          },
                          {
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "The unique ID of the platform rule. This is automatically generated when creating a rule and cannot be modified.",
                                "example": "e299da7b-22ec-4e4f-b541-a896bba587df"
                              },
                              "created_by": {
                                "type": "string",
                                "description": "ID of the operator that created the platform rule.",
                                "example": "6fd3ba96-5c1f-4404-84ad-ceaf54dd0dcc"
                              },
                              "updated_by": {
                                "type": "string",
                                "description": "ID of the operator that most recently updated the platform rule. It is set automatically on update.",
                                "example": "6fd3ba96-5c1f-4404-84ad-ceaf54dd0dcc"
                              },
                              "created_at": {
                                "type": "string",
                                "description": "An ISO-8601 timestamp of when the platform rule was created.",
                                "example": "2019-06-04T07:55:42.000Z"
                              },
                              "updated_at": {
                                "type": "string",
                                "description": "An ISO-8601 timestamp of when the platform rule was updated.",
                                "example": "2019-06-04T07:55:42.000Z"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Please check for input errors (e.g., malformed request syntax)."
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Your bearer token is valid but you have no access to the requested resource.\n"
          },
          "500": {
            "description": "Internal server error has occurred. Please try again later."
          }
        }
      }
    },
    "/sites/{site_id}/platform_rules/{rule_id}": {
      "patch": {
        "summary": "Update rule",
        "tags": [
          "Platform rules"
        ],
        "description": "Updates a platform rule for a given site.\n\nPlatform rules define a list of event sources that will trigger a list of actions, in case a list of conditions\nare met.\n\nThe user updating a platform rule must have at least super manager role on the given site.\n",
        "parameters": [
          {
            "in": "path",
            "required": true,
            "name": "site_id",
            "description": "ID of the site.",
            "schema": {
              "type": "string"
            },
            "example": "31a3f2ea-4473-4519-8f9e-a33cc6a48a74"
          },
          {
            "name": "rule_id",
            "in": "path",
            "required": true,
            "description": "ID of the platform rule.",
            "example": "e299da7b-22ec-4e4f-b541-a896bba587df",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Platform rule's properties.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Platform rule name.",
                        "example": "My platform rule"
                      },
                      "enabled": {
                        "type": "boolean",
                        "description": "Determines whether the platform rule is enabled.",
                        "example": true
                      },
                      "sources": {
                        "type": "array",
                        "minItems": 1,
                        "description": "A set of sources of a platform rule event.\n",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "title": "No visitor message",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "no_visitor_message"
                                  ],
                                  "description": "Type of the source event.\n\n* `no_visitor_message` - The visitor didn't send a message in the last `threshold` seconds.\n",
                                  "example": "no_visitor_message"
                                },
                                "threshold": {
                                  "type": "integer",
                                  "description": "The number of seconds the visitor has not sent any messages. Must be in the range of 10 to 43200.\n",
                                  "minimum": 10,
                                  "maximum": 43200,
                                  "example": 300
                                }
                              },
                              "required": [
                                "type",
                                "threshold"
                              ]
                            },
                            {
                              "type": "object",
                              "title": "Reactive request is pending",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "reactive_request_pending"
                                  ],
                                  "description": "Type of the source event.\n\n* `reactive_request_pending` - A reactive engagement, transfer or\njoin request has been pending for a number of seconds.\n",
                                  "example": "reactive_request_pending"
                                },
                                "threshold": {
                                  "type": "integer",
                                  "description": "Number of seconds that defines for how long the request has been pending for the platform rule to trigger. Must be in the range of 0 to 60.\n",
                                  "minimum": 0,
                                  "maximum": 60,
                                  "example": 3
                                }
                              },
                              "required": [
                                "type",
                                "threshold"
                              ]
                            }
                          ]
                        }
                      },
                      "conditions": {
                        "type": "array",
                        "minItems": 0,
                        "description": "A set of conditions that regulates the triggering of the platform rule.\n",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "title": "Visitor media type",
                              "required": [
                                "type",
                                "media_type"
                              ],
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "visitor_media_type"
                                  ],
                                  "description": "Either the visitorâ€™s highest media type (in case source event `no_visitor_message`) or requested media type (in case of source event `reactive_request_pending`) is one of the media types listed in `media_type` array.\n",
                                  "example": "visitor_media_type"
                                },
                                "media_type": {
                                  "type": "array",
                                  "description": "Media types associated with the condition.",
                                  "items": {
                                    "type": "string",
                                    "enum": [
                                      "text"
                                    ]
                                  },
                                  "example": [
                                    "text"
                                  ]
                                }
                              }
                            },
                            {
                              "type": "object",
                              "title": "From queues",
                              "required": [
                                "type",
                                "queue_ids"
                              ],
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "from_queues"
                                  ],
                                  "description": "Either the engagement leg (in case source event `no_visitor_message`) or reactive request (in case of source event `reactive_request_pending`) is from a queue listed in `queue_ids` array.\n",
                                  "example": "from_queues"
                                },
                                "queue_ids": {
                                  "type": "array",
                                  "description": "The queue IDs associated with the condition.",
                                  "items": {
                                    "type": "string"
                                  },
                                  "example": [
                                    "d290f1ee-6c54-4b01-90e6-d701748f0851",
                                    "c3753f72-fcfe-4b4d-b91e-b48f46d149f9"
                                  ]
                                }
                              }
                            }
                          ]
                        }
                      },
                      "actions": {
                        "type": "array",
                        "minItems": 1,
                        "description": "A set of actions that are triggered when the platform rule's conditions are met and the source events occur.\n",
                        "items": {
                          "anyOf": [
                            {
                              "type": "object",
                              "title": "End engagement",
                              "required": [
                                "type"
                              ],
                              "properties": {
                                "type": {
                                  "description": "End the current engagement.\n\nThis action is valid in context of the following sources: `no_visitor_message`.\n",
                                  "type": "string",
                                  "enum": [
                                    "end_engagement"
                                  ],
                                  "example": "end_engagement"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "title": "Send chat message",
                              "required": [
                                "type",
                                "message"
                              ],
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "enum": [
                                    "send_chat_message"
                                  ],
                                  "description": "Send chat message to the recipient.\n\nThis action is valid in context of the following sources: `no_visitor_message`.\n",
                                  "example": "send_chat_message"
                                },
                                "message": {
                                  "example": {
                                    "content": "What are you interested in?",
                                    "attachment": {
                                      "type": "single_choice",
                                      "image_url": "https://example.com/images/site_logo.jpeg",
                                      "options": [
                                        {
                                          "text": "Car suppliers.",
                                          "value": "cars"
                                        },
                                        {
                                          "text": "Insurance companies.",
                                          "value": "insurance"
                                        }
                                      ]
                                    },
                                    "metadata": {
                                      "customer_id": 9876542,
                                      "customer_name": "Lorem Ipsum"
                                    }
                                  },
                                  "description": "A message to the recipient.\n\n* `message` can either be a string or an object containing additional properties.\n",
                                  "oneOf": [
                                    {
                                      "type": "string",
                                      "title": "Text message",
                                      "description": "A textual message that sender wishes to send to the recipient.\n",
                                      "example": "Is there anything I can help you with?"
                                    },
                                    {
                                      "type": "object",
                                      "title": "JSON message",
                                      "required": [
                                        "content"
                                      ],
                                      "properties": {
                                        "content": {
                                          "type": "string",
                                          "description": "A textual part of the message that the sender wishes to send to the recipient.\n",
                                          "example": "Is there anything I can help you with?"
                                        },
                                        "type": {
                                          "type": "string",
                                          "description": "Chat message type.",
                                          "default": "chat",
                                          "enum": [
                                            "chat"
                                          ],
                                          "example": "chat"
                                        },
                                        "attachment": {
                                          "description": "Chat message attachment.\n",
                                          "title": "Single choice",
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "description": "Type of an attachment.\n\nTo present the user with the list of options to make a simplified decision for the next interaction, type must\nbe `single_choice`. Selected option will be sent back to the other party as a regular chat message containing\nsingle choice response attachment.\n",
                                              "enum": [
                                                "single_choice"
                                              ]
                                            },
                                            "options": {
                                              "type": "array",
                                              "description": "A list of all available choices for the user to choose from.\n",
                                              "items": {
                                                "type": "object",
                                                "properties": {
                                                  "text": {
                                                    "type": "string",
                                                    "description": "Text displayed to user as a choice label.",
                                                    "example": "I'm interested in insurance policies."
                                                  },
                                                  "value": {
                                                    "type": "string",
                                                    "description": "Value of the choice sent as a response on user interaction.",
                                                    "example": "insurance"
                                                  }
                                                },
                                                "required": [
                                                  "text",
                                                  "value"
                                                ]
                                              }
                                            },
                                            "image_url": {
                                              "type": "string",
                                              "description": "URL of an image displayed on top of the choices expressing clear intent of the cards.\n",
                                              "example": "https://example.com/files/image.png"
                                            }
                                          },
                                          "required": [
                                            "type",
                                            "options"
                                          ]
                                        },
                                        "metadata": {
                                          "type": "object",
                                          "description": "Chat message metadata allows an integrator to add end to end\ndata inside a JSON object.\n\nThis information is only relevant\nto the integrator and will be handled transparently inside\nGlia.\n\nChat message metadata is an optional property of type JSON\nobject specified by the integrator. Any JSON object is\nallowed.\n",
                                          "additionalProperties": {
                                            "type": "object"
                                          },
                                          "example": {
                                            "custom_card_type": "insurance",
                                            "customer_number": "C123456789",
                                            "age": 33
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            },
                            {
                              "type": "object",
                              "title": "Accept request",
                              "required": [
                                "type"
                              ],
                              "properties": {
                                "type": {
                                  "description": "Accepts the reactive engagement, transfer or join request.\n\nThis action is valid in context of the following sources: `reactive_request_pending`.\n",
                                  "type": "string",
                                  "enum": [
                                    "accept_request"
                                  ],
                                  "example": "accept_request"
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The platform rule is successfully updated. Returns the properties of the updated platform rule.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "Platform rule name.",
                          "example": "My platform rule"
                        },
                        "enabled": {
                          "type": "boolean",
                          "description": "Determines whether the platform rule is enabled.",
                          "example": true
                        },
                        "sources": {
                          "type": "array",
                          "minItems": 1,
                          "description": "A set of sources of a platform rule event.\n",
                          "items": {
                            "anyOf": [
                              {
                                "type": "object",
                                "title": "No visitor message",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "no_visitor_message"
                                    ],
                                    "description": "Type of the source event.\n\n* `no_visitor_message` - The visitor didn't send a message in the last `threshold` seconds.\n",
                                    "example": "no_visitor_message"
                                  },
                                  "threshold": {
                                    "type": "integer",
                                    "description": "The number of seconds the visitor has not sent any messages. Must be in the range of 10 to 43200.\n",
                                    "minimum": 10,
                                    "maximum": 43200,
                                    "example": 300
                                  }
                                },
                                "required": [
                                  "type",
                                  "threshold"
                                ]
                              },
                              {
                                "type": "object",
                                "title": "Reactive request is pending",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "reactive_request_pending"
                                    ],
                                    "description": "Type of the source event.\n\n* `reactive_request_pending` - A reactive engagement, transfer or\njoin request has been pending for a number of seconds.\n",
                                    "example": "reactive_request_pending"
                                  },
                                  "threshold": {
                                    "type": "integer",
                                    "description": "Number of seconds that defines for how long the request has been pending for the platform rule to trigger. Must be in the range of 0 to 60.\n",
                                    "minimum": 0,
                                    "maximum": 60,
                                    "example": 3
                                  }
                                },
                                "required": [
                                  "type",
                                  "threshold"
                                ]
                              }
                            ]
                          }
                        },
                        "conditions": {
                          "type": "array",
                          "minItems": 0,
                          "description": "A set of conditions that regulates the triggering of the platform rule.\n",
                          "items": {
                            "anyOf": [
                              {
                                "type": "object",
                                "title": "Visitor media type",
                                "required": [
                                  "type",
                                  "media_type"
                                ],
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "visitor_media_type"
                                    ],
                                    "description": "Either the visitorâ€™s highest media type (in case source event `no_visitor_message`) or requested media type (in case of source event `reactive_request_pending`) is one of the media types listed in `media_type` array.\n",
                                    "example": "visitor_media_type"
                                  },
                                  "media_type": {
                                    "type": "array",
                                    "description": "Media types associated with the condition.",
                                    "items": {
                                      "type": "string",
                                      "enum": [
                                        "text"
                                      ]
                                    },
                                    "example": [
                                      "text"
                                    ]
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "title": "From queues",
                                "required": [
                                  "type",
                                  "queue_ids"
                                ],
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "from_queues"
                                    ],
                                    "description": "Either the engagement leg (in case source event `no_visitor_message`) or reactive request (in case of source event `reactive_request_pending`) is from a queue listed in `queue_ids` array.\n",
                                    "example": "from_queues"
                                  },
                                  "queue_ids": {
                                    "type": "array",
                                    "description": "The queue IDs associated with the condition.",
                                    "items": {
                                      "type": "string"
                                    },
                                    "example": [
                                      "d290f1ee-6c54-4b01-90e6-d701748f0851",
                                      "c3753f72-fcfe-4b4d-b91e-b48f46d149f9"
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "actions": {
                          "type": "array",
                          "minItems": 1,
                          "description": "A set of actions that are triggered when the platform rule's conditions are met and the source events occur.\n",
                          "items": {
                            "anyOf": [
                              {
                                "type": "object",
                                "title": "End engagement",
                                "required": [
                                  "type"
                                ],
                                "properties": {
                                  "type": {
                                    "description": "End the current engagement.\n\nThis action is valid in context of the following sources: `no_visitor_message`.\n",
                                    "type": "string",
                                    "enum": [
                                      "end_engagement"
                                    ],
                                    "example": "end_engagement"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "title": "Send chat message",
                                "required": [
                                  "type",
                                  "message"
                                ],
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "enum": [
                                      "send_chat_message"
                                    ],
                                    "description": "Send chat message to the recipient.\n\nThis action is valid in context of the following sources: `no_visitor_message`.\n",
                                    "example": "send_chat_message"
                                  },
                                  "message": {
                                    "example": {
                                      "content": "What are you interested in?",
                                      "attachment": {
                                        "type": "single_choice",
                                        "image_url": "https://example.com/images/site_logo.jpeg",
                                        "options": [
                                          {
                                            "text": "Car suppliers.",
                                            "value": "cars"
                                          },
                                          {
                                            "text": "Insurance companies.",
                                            "value": "insurance"
                                          }
                                        ]
                                      },
                                      "metadata": {
                                        "customer_id": 9876542,
                                        "customer_name": "Lorem Ipsum"
                                      }
                                    },
                                    "description": "A message to the recipient.\n\n* `message` can either be a string or an object containing additional properties.\n",
                                    "oneOf": [
                                      {
                                        "type": "string",
                                        "title": "Text message",
                                        "description": "A textual message that sender wishes to send to the recipient.\n",
                                        "example": "Is there anything I can help you with?"
                                      },
                                      {
                                        "type": "object",
                                        "title": "JSON message",
                                        "required": [
                                          "content"
                                        ],
                                        "properties": {
                                          "content": {
                                            "type": "string",
                                            "description": "A textual part of the message that the sender wishes to send to the recipient.\n",
                                            "example": "Is there anything I can help you with?"
                                          },
                                          "type": {
                                            "type": "string",
                                            "description": "Chat message type.",
                                            "default": "chat",
                                            "enum": [
                                              "chat"
                                            ],
                                            "example": "chat"
                                          },
                                          "attachment": {
                                            "description": "Chat message attachment.\n",
                                            "title": "Single choice",
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "description": "Type of an attachment.\n\nTo present the user with the list of options to make a simplified decision for the next interaction, type must\nbe `single_choice`. Selected option will be sent back to the other party as a regular chat message containing\nsingle choice response attachment.\n",
                                                "enum": [
                                                  "single_choice"
                                                ]
                                              },
                                              "options": {
                                                "type": "array",
                                                "description": "A list of all available choices for the user to choose from.\n",
                                                "items": {
                                                  "type": "object",
                                                  "properties": {
                                                    "text": {
                                                      "type": "string",
                                                      "description": "Text displayed to user as a choice label.",
                                                      "example": "I'm interested in insurance policies."
                                                    },
                                                    "value": {
                                                      "type": "string",
                                                      "description": "Value of the choice sent as a response on user interaction.",
                                                      "example": "insurance"
                                                    }
                                                  },
                                                  "required": [
                                                    "text",
                                                    "value"
                                                  ]
                                                }
                                              },
                                              "image_url": {
                                                "type": "string",
                                                "description": "URL of an image displayed on top of the choices expressing clear intent of the cards.\n",
                                                "example": "https://example.com/files/image.png"
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "options"
                                            ]
                                          },
                                          "metadata": {
                                            "type": "object",
                                            "description": "Chat message metadata allows an integrator to add end to end\ndata inside a JSON object.\n\nThis information is only relevant\nto the integrator and will be handled transparently inside\nGlia.\n\nChat message metadata is an optional property of type JSON\nobject specified by the integrator. Any JSON object is\nallowed.\n",
                                            "additionalProperties": {
                                              "type": "object"
                                            },
                                            "example": {
                                              "custom_card_type": "insurance",
                                              "customer_number": "C123456789",
                                              "age": 33
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "title": "Accept request",
                                "required": [
                                  "type"
                                ],
                                "properties": {
                                  "type": {
                                    "description": "Accepts the reactive engagement, transfer or join request.\n\nThis action is valid in context of the following sources: `reactive_request_pending`.\n",
                                    "type": "string",
                                    "enum": [
                                      "accept_request"
                                    ],
                                    "example": "accept_request"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    },
                    {
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "The unique ID of the platform rule. This is automatically generated when creating a rule and cannot be modified.",
                          "example": "e299da7b-22ec-4e4f-b541-a896bba587df"
                        },
                        "created_by": {
                          "type": "string",
                          "description": "ID of the operator that created the platform rule.",
                          "example": "6fd3ba96-5c1f-4404-84ad-ceaf54dd0dcc"
                        },
                        "updated_by": {
                          "type": "string",
                          "description": "ID of the operator that most recently updated the platform rule. It is set automatically on update.",
                          "example": "6fd3ba96-5c1f-4404-84ad-ceaf54dd0dcc"
                        },
                        "created_at": {
                          "type": "string",
                          "description": "An ISO-8601 timestamp of when the platform rule was created.",
                          "example": "2019-06-04T07:55:42.000Z"
                        },
                        "updated_at": {
                          "type": "string",
                          "description": "An ISO-8601 timestamp of when the platform rule was updated.",
                          "example": "2019-06-04T07:55:42.000Z"
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request. Please check for input errors (e.g., malformed request syntax)."
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Your bearer token is valid but you have no access to the requested resource.\n"
          },
          "500": {
            "description": "Internal server error has occurred. Please try again later."
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
