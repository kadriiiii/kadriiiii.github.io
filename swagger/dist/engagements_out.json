{
  "openapi": "3.0.0",
  "info": {
    "title": "Engagements",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.salemove.com",
      "description": "Glia REST API base URL"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/engagements": {
      "get": {
        "summary": "List engagements",
        "tags": [
          "Engagement"
        ],
        "description": "Fetches a collection of engagements and related data. The results are paginated, and sorted by `start_date` in\ndescending order.\n\n* The response payload includes `next_page` link which can be used to get next batch of engagements. If the\n`next_page` is `null` then there are no more engagements.\n* This link must **not** be parsed as it is automatically generated and can change at any time.\n\n## Interpreting the output\n\n### Pagination\n\n* In case you want to paginate the engagements' list, you will see the `next_page` link in the first batch of\nengagements to use to fetch the next batch.\n* **Always** use the `next_page` link as is to fetch the next batch of engagements. **Never** try to parse the\npage numbers or other values in the `next_page` to construct the URL for next page or jump to an intermediate\npage. This will break the continuity of the data you want to fetch (records may be missed). Note that the format\nof the `next_page` URL is also subject to change at any point in time.\n* See also [Pagination](ref:pagination).\n\n### Checking for duplicates\n\n*  It may happen that few engagements are visible in two subsequent pages, thus becoming a duplicate in the whole\nset of engagements.\n* Although it does not happen often, we recommend to check for duplicates while fetching the list of engagements.\n\n#### Example\n\n* Set up few `GET /engagements` jobs setting `start_date` and `end_date` so that the periods do not overlap.\n* Each job has a script using the `next_page` to fetch another batch of engagements.\n* One possibility for setting up the script to use `next_page`, see Glia example on how to use JavaScript and\n`next_page`:\n    - [Example](https://github.com/salemove/examples/blob/master/rest_api/node/fetch_engagements.js).\n",
        "parameters": [
          {
            "name": "site_ids[]",
            "in": "query",
            "description": "A list of site IDs whose engagements are requested.\n\nThe requester must be authorized to access the provided sites.\n",
            "required": true,
            "allowReserved": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "style": "form",
            "explode": true,
            "example": [
              "def34343-s888-43ae-99e0-07a676e9a111",
              "def34343-s777-43ae-99e0-07a676e9a111"
            ]
          },
          {
            "name": "operator_ids[]",
            "in": "query",
            "description": "A list of operator IDs whose engagements are requested.\n\n* If the requester is a manager on the sites, the `operator_ids` filter can be either omitted or be an empty\narray to query engagements conducted by any operator.\n* If the requester is not a manager, they must specify their own ID in `operator_ids` filter.\n",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": [
              "ec317122-o888-4b43-996d-34a2ed3b76d8",
              "ec317122-o777-4b43-996d-34a2ed3b76d8"
            ]
          },
          {
            "name": "start_date",
            "in": "query",
            "description": "The response will include engagements that happened from the `start_date` (included) onward.\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "2017-01-01T10:23:04Z"
          },
          {
            "name": "end_date",
            "in": "query",
            "description": "The response will include engagements that happened before the `end_date` (not included).\n",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "2017-01-07T03:30:05Z"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "If pagination is used then this parameter specifies the number of engagements per page.\n",
            "required": false,
            "schema": {
              "type": "number"
            },
            "example": 30
          },
          {
            "name": "order",
            "in": "query",
            "description": "Specifies whether the results should be sorted in ascending (`asc`) or descending (`desc`) order. By default,\nengagements are sorted by their start time in descending order.\n",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "asc",
                "desc"
              ]
            },
            "example": "asc"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n\nList of engagements retrieved. See also [Interpreting the output](ref:engagement#interpreting-the-output).\n",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "properties": {
                    "next_page": {
                      "type": "string",
                      "format": "URL"
                    },
                    "last_page": {
                      "type": "string",
                      "format": "URL"
                    },
                    "engagements": {
                      "type": "array",
                      "items": {
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Engagement ID.",
                            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
                          },
                          "engagement_type": {
                            "type": "string",
                            "description": "Engagement type.",
                            "enum": [
                              "proactive",
                              "reactive"
                            ],
                            "example": "reactive"
                          },
                          "created_at": {
                            "type": "string",
                            "description": "An ISO-8601 timestamp of when the engagement request was accepted and with that the engagement started.\n",
                            "example": "2020-05-31T09:46:28Z"
                          },
                          "visitor_name": {
                            "type": "string",
                            "description": "Visitor's name.",
                            "example": "John Smith"
                          },
                          "visitor_browser": {
                            "type": "string",
                            "description": "Visitor's browser.",
                            "example": "Chrome"
                          },
                          "visitor_device_type": {
                            "type": "string",
                            "description": "Visitor's device type.",
                            "enum": [
                              "mobile",
                              "computer"
                            ],
                            "example": "mobile"
                          },
                          "visitor_id": {
                            "type": "string",
                            "description": "Visitor ID.",
                            "example": "c2c9106e-v888-47b2-8db3-089fb49dc9a5"
                          },
                          "duration": {
                            "type": "integer",
                            "description": "Engagement's duration in seconds. Is a sum of leg durations. Does not include queue wait times.\nNULL for ongoing engagement.\n",
                            "example": 683
                          },
                          "queue_wait_time": {
                            "type": "integer",
                            "description": "The time visitor spent in queue before the engagement, in seconds.\n\nThis value is present only for reactive engagements started via queueing. Does not include transfer queue wait\ntimes.\n",
                            "example": 42
                          },
                          "audio_recording_urls": {
                            "type": "array",
                            "items": {
                              "type": "string",
                              "example": "'https://api.salemove.com/sub_engagements/1234567/conference_recordings/ar56789s-20df-4513-b8d4-b1aff1aa99c9.mp3'\n"
                            },
                            "description": "A list of audio recordings URLs."
                          },
                          "flagged": {
                            "type": "boolean",
                            "description": "Whether the engagement has been flagged or not.",
                            "example": false
                          },
                          "crm_forwarded": {
                            "type": "boolean",
                            "description": "Whether the CRM Export has already occurred or not.",
                            "example": true
                          },
                          "summary_forwarded": {
                            "type": "boolean",
                            "description": "Whether the summary has already been forwarded.",
                            "example": false
                          },
                          "platform": {
                            "type": "string",
                            "description": "The platform where the engagement was initiated.\n\n* `omnibrowse` - engagement was requested from Call Visualizer (either in Glia Hub or embedded in CRM),\n* `omnicore` - all other cases.\n",
                            "enum": [
                              "omnibrowse",
                              "omnicore"
                            ],
                            "example": "omnicore"
                          },
                          "visitor": {
                            "type": "object",
                            "properties": {
                              "href": {
                                "type": "string",
                                "description": "URL of the visitor's information.",
                                "example": "'https://api.salemove.com/sites/def34343-s888-43ae-99e0-07a676e9a111/visitors/c2c9106e-v888-47b2-8db3-089fb49dc9a5'\n"
                              }
                            }
                          },
                          "chat_transcript": {
                            "type": "object",
                            "properties": {
                              "href": {
                                "type": "string",
                                "description": "URL of the engagement's chat transcript.",
                                "example": "'https://api.salemove.com/engagements/abc12121-e888-43ae-99e0-07a676e9a111/chat_transcript'\n"
                              }
                            }
                          },
                          "operators": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "href": {
                                  "type": "string",
                                  "description": "URL of the participating operator.",
                                  "example": "https://api.salemove.com/operators/ec317122-o888-4b43-996d-34a2ed3b76d8"
                                }
                              }
                            }
                          },
                          "source": {
                            "type": "string",
                            "description": "One of the engagement request sources:\n* `button_embed` - (_reactive_) Engagement started via Contact Operator Button.\n* `callout` - (_reactive_) Engagement started via business rules. E.g. a business rule triggered a media\nselector which was then used to start the engagement.\n* `external_call` - (_reactive_) **Deprecated**\n* `facebook` - (_reactive_) Visitor sent message from Facebook Messenger.\n* `hotlink` - (_reactive_) Engagement started via hotlink.\n* `offline_phone` - (_reactive_) Visitor called a phone number.\n* `call_visualizer` - (_proactive_) Engagement started by entering visitor code in Call Visualizer (embedded or Glia Hub).\n* `glia_hub` - (_proactive_) Engagement started by selecting visitor in Visitor List of Glia Hub.\n* `outbound_call` - (_proactive_) Operator called visitor's phone.\n* `outbound_text` - (_proactive_) SMS message was sent to visitor's phone.\n* `sdk` - (_reactive_) Engagement started using the JS SDK, Android SDK or iOS SDK.\n* `slack` - (_reactive_) Engagement started via Slack.\n* `sms` - (_reactive_) Visitor sent SMS message.\n* `tab` - (_reactive_) Engagement started in the browser tab (via the bubble).\n* `visitor_integrator` - (_reactive_) Engagement started by REST API call.\n* `whatsapp` - (_reactive_) Visitor sent message from WhatsApp.\n* `<empty>` - (_proactive_) Engagement was requested by the operator.\n",
                            "enum": [
                              "button_embed",
                              "callout",
                              "external_call",
                              "facebook",
                              "hotlink",
                              "offline_phone",
                              "call_visualizer",
                              "glia_hub",
                              "outbound_call",
                              "outbound_text",
                              "sdk",
                              "slack",
                              "sms",
                              "tab",
                              "visitor_integrator",
                              "whatsapp",
                              "<empty>"
                            ],
                            "example": "tab"
                          },
                          "queues": {
                            "type": "array",
                            "description": "A list of queues that the visitor was enqueued in before starting the engagement. This value is present only\nfor reactive engagements started or transfer was made via queueing.\n",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "ID of the queue.",
                                  "example": "f58d4671-q888-4e87-96dc-1d41027bebc5"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the queue.",
                                  "example": "Example queue"
                                }
                              }
                            }
                          },
                          "legs": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "Engagement leg ID.",
                                  "example": "abc12121-c995-45ec-8e0f-5bf4d5e16a2e"
                                },
                                "operator": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "ID of the operator.",
                                      "example": "ec317122-o888-4b43-996d-34a2ed3b76d8"
                                    }
                                  }
                                },
                                "guests": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "Guest ID.",
                                        "example": "ef74940e-1fd8-432c-964f-7f2d940fbd3a"
                                      },
                                      "type": {
                                        "type": "string",
                                        "description": "Guest type. Currently only `operator` type is supported.",
                                        "enum": [
                                          "operator"
                                        ]
                                      },
                                      "joined_at": {
                                        "description": "An ISO-8601 timestamp of when the guest joined the engagement leg.\n",
                                        "example": "2020-05-31T09:47:00Z"
                                      },
                                      "left_at": {
                                        "description": "An ISO-8601 timestamp of when the guest left the engagement leg.\n",
                                        "example": "2020-05-31T09:48:00Z"
                                      }
                                    }
                                  },
                                  "description": "A list of guests who participated in an engagement leg.\n"
                                },
                                "site": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "ID of the site where the engagement leg took place.",
                                      "example": "def34343-s888-43ae-99e0-07a676e9a111"
                                    }
                                  }
                                },
                                "accepted_at": {
                                  "type": "string",
                                  "description": "An ISO-8601 timestamp of when the transfer or engagement request was accepted and thus the engagement leg started.\n",
                                  "example": "2020-05-31T09:55:20Z"
                                },
                                "duration": {
                                  "type": "integer",
                                  "description": "Engagement leg's duration in seconds. Does not include queue wait times. NULL for ongoing engagement leg.\n"
                                },
                                "used_cobrowsing": {
                                  "type": "boolean",
                                  "description": "Whether CoBrowsing was used or not.",
                                  "example": true
                                },
                                "ended_at": {
                                  "type": "string",
                                  "description": "ISO-8601 timestamp when engagement/leg was ended or when engagement was transferred out.\n",
                                  "example": "2020-05-31T10:02:18Z"
                                },
                                "end_reason": {
                                  "type": "string",
                                  "description": "Engagement leg end reason. NULL for ongoing engagement.",
                                  "enum": [
                                    "visitor_left",
                                    "visitor_hung_up",
                                    "operator_left",
                                    "operator_hung_up",
                                    "error",
                                    "transfer"
                                  ],
                                  "example": "visitor_hung_up"
                                },
                                "requested_at": {
                                  "type": "string",
                                  "description": "An ISO-8601 timestamp of when the engagement or transfer was requested.\n",
                                  "example": "2020-05-31T09:55:13Z"
                                },
                                "request_type": {
                                  "type": "string",
                                  "description": "Request type that began the engagement leg.",
                                  "enum": [
                                    "proactive",
                                    "reactive",
                                    "transfer"
                                  ],
                                  "example": "transfer"
                                },
                                "offered_media_type": {
                                  "type": "string",
                                  "description": "Engagement offered or requested media type.",
                                  "enum": [
                                    "text",
                                    "audio",
                                    "phone",
                                    "video"
                                  ]
                                },
                                "accepted_media_type": {
                                  "type": "string",
                                  "description": "Engagement accepted media type.",
                                  "enum": [
                                    "text",
                                    "audio",
                                    "phone",
                                    "video"
                                  ]
                                },
                                "request_queues": {
                                  "type": "array",
                                  "description": "A list of queues that the visitor was enqueued in before starting the engagement. This value is present only\nfor reactive engagements started or transfer was made via queueing.\n",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "ID of the queue.",
                                        "example": "f58d4671-q888-4e87-96dc-1d41027bebc5"
                                      },
                                      "name": {
                                        "type": "string",
                                        "description": "Name of the queue.",
                                        "example": "Example queue"
                                      }
                                    }
                                  }
                                },
                                "queue_wait_time": {
                                  "type": "integer",
                                  "description": "Time spent in queue preceding this engagement leg (in seconds). NULL if queues were not used.\n",
                                  "example": 3
                                },
                                "request_source": {
                                  "type": "string",
                                  "description": "One of the engagement request sources:\n* `button_embed` - (_reactive_) Engagement started via Contact Operator Button.\n* `callout` - (_reactive_) Engagement started via business rules. E.g. a business rule triggered a media\nselector which was then used to start the engagement.\n* `external_call` - (_reactive_) **Deprecated**\n* `facebook` - (_reactive_) Visitor sent message from Facebook Messenger.\n* `hotlink` - (_reactive_) Engagement started via hotlink.\n* `offline_phone` - (_reactive_) Visitor called a phone number.\n* `call_visualizer` - (_proactive_) Engagement started by entering visitor code in Call Visualizer (embedded or Glia Hub).\n* `glia_hub` - (_proactive_) Engagement started by selecting visitor in Visitor List of Glia Hub.\n* `outbound_call` - (_proactive_) Operator called visitor's phone.\n* `outbound_text` - (_proactive_) SMS message was sent to visitor's phone.\n* `sdk` - (_reactive_) Engagement started using the JS SDK, Android SDK or iOS SDK.\n* `slack` - (_reactive_) Engagement started via Slack.\n* `sms` - (_reactive_) Visitor sent SMS message.\n* `tab` - (_reactive_) Engagement started in the browser tab (via the bubble).\n* `visitor_integrator` - (_reactive_) Engagement started by REST API call.\n* `whatsapp` - (_reactive_) Visitor sent message from WhatsApp.\n* `<empty>` - (_proactive_) Engagement was requested by the operator.\n",
                                  "enum": [
                                    "button_embed",
                                    "callout",
                                    "external_call",
                                    "facebook",
                                    "hotlink",
                                    "offline_phone",
                                    "call_visualizer",
                                    "glia_hub",
                                    "outbound_call",
                                    "outbound_text",
                                    "sdk",
                                    "slack",
                                    "sms",
                                    "tab",
                                    "visitor_integrator",
                                    "whatsapp",
                                    "<empty>"
                                  ],
                                  "example": "tab"
                                },
                                "highest_visitor_media_type": {
                                  "type": "string",
                                  "description": "Highest media type visitor used during this engagement leg.",
                                  "enum": [
                                    "text",
                                    "audio",
                                    "video"
                                  ]
                                },
                                "highest_operator_media_type": {
                                  "type": "string",
                                  "description": "Highest media type operator used during this engagement leg.",
                                  "enum": [
                                    "text",
                                    "audio",
                                    "video"
                                  ]
                                }
                              },
                              "required": [
                                "id",
                                "operator",
                                "site",
                                "accepted_at",
                                "duration",
                                "used_cobrowsing",
                                "ended_at",
                                "end_reason",
                                "requested_at",
                                "request_type",
                                "offered_media_type",
                                "accepted_media_type",
                                "request_queues",
                                "queue_wait_time",
                                "request_source",
                                "highest_visitor_media_type",
                                "highest_operator_media_type"
                              ]
                            },
                            "description": "A list of engagement legs.\n\nEngagement starts with one leg. A leg is added each time the engagement is transferred.\n"
                          },
                          "cobrowsing_used": {
                            "type": "boolean",
                            "description": "Whether CoBrowsing was used or not.",
                            "example": true
                          },
                          "video_used": {
                            "type": "boolean",
                            "description": "Whether video was used or not.",
                            "example": true
                          },
                          "audio_used": {
                            "type": "boolean",
                            "description": "Whether audio was used or not.",
                            "example": true
                          }
                        },
                        "required": [
                          "id",
                          "engagement_type",
                          "created_at",
                          "visitor_name",
                          "visitor_browser",
                          "visitor_device_type",
                          "visitor_id",
                          "duration",
                          "audio_recording_urls",
                          "flagged",
                          "crm_forwarded",
                          "summary_forwarded",
                          "platform",
                          "visitor",
                          "chat_transcript",
                          "operators",
                          "legs",
                          "cobrowsing_used",
                          "video_used",
                          "audio_used"
                        ]
                      }
                    }
                  }
                },
                "example": {
                  "next_page": "https://api.salemove.com/engagements?per_page=30&cursor=45629133",
                  "engagements": [
                    {
                      "id": "abc12121-e888-43ae-99e0-07a676e9a111",
                      "engagement_type": "reactive",
                      "created_at": "2020-05-31T09:46:28.000Z",
                      "duration": 268,
                      "visitor_name": "John Smith",
                      "visitor_browser": "Chrome",
                      "visitor_device_type": "mobile",
                      "visitor_id": "c2c9106e-v888-47b2-8db3-089fb49dc9a5",
                      "cobrowsing_used": true,
                      "video_used": true,
                      "audio_used": true,
                      "flagged": false,
                      "queue_wait_time": 42,
                      "platform": "omnicore",
                      "audio_recording_urls": [
                        "https://api.salemove.com/sub_engagements/1234567/conference_recordings/ar56789s-20df-4513-b8d4-b1aff1aa99c9.mp3"
                      ],
                      "crm_forwarded": false,
                      "summary_forwarded": false,
                      "visitor": {
                        "href": "https://api.salemove.com/visitors/c2c9106e-v888-47b2-8db3-089fb49dc9a5"
                      },
                      "chat_transcript": {
                        "href": "https://api.salemove.com/engagements/abc12121-e888-43ae-99e0-07a676e9a111/chat_transcript"
                      },
                      "operators": [
                        {
                          "href": "https://api.salemove.com/operators/ec317122-o888-4b43-996d-34a2ed3b76d8"
                        },
                        {
                          "href": "https://api.salemove.com/operators/ec317122-o777-4b43-996d-34a2ed3b76d8"
                        }
                      ],
                      "queues": [
                        {
                          "id": "f58d4671-q888-4e87-96dc-1d41027bebc5",
                          "name": "Queue 1"
                        }
                      ],
                      "legs": [
                        {
                          "id": "cde12121-c207-45ec-8e0f-5bf4d5e16a2e",
                          "operator": {
                            "id": "ec317122-o777-4b43-996d-34a2ed3b76d8"
                          },
                          "guests": [
                            {
                              "id": "9beacfd3-fb36-4a40-827b-6c7c26d34022",
                              "type": "operator",
                              "joined_at": "2020-05-31T09:49:20.000Z",
                              "left_at": "2020-05-31T09:50:10.000Z"
                            }
                          ],
                          "site": {
                            "id": "def34343-s888-43ae-99e0-07a676e9a111"
                          },
                          "requested_at": "2020-05-31T09:48:50.000Z",
                          "accepted_at": "2020-05-31T09:48:57.000Z",
                          "request_type": "transfer",
                          "request_source": null,
                          "offered_media_type": "text",
                          "accepted_media_type": "text",
                          "request_queues": null,
                          "duration": 158,
                          "highest_visitor_media_type": "video",
                          "highest_operator_media_type": "audio",
                          "used_cobrowsing": true,
                          "ended_at": "2020-05-31T09:51:28.000Z",
                          "end_reason": "visitor_left"
                        },
                        {
                          "id": "bcd12121-c106-45ec-8e0f-5bf4d5e16a2e",
                          "operator": {
                            "id": "ec317122-o888-4b43-996d-34a2ed3b76d8"
                          },
                          "site": {
                            "id": "def34343-s888-43ae-99e0-07a676e9a111"
                          },
                          "requested_at": "2020-05-31T09:46:28.000Z",
                          "accepted_at": "2020-05-31T09:47:01.000Z",
                          "request_type": "reactive",
                          "request_source": "tab",
                          "offered_media_type": "video",
                          "accepted_media_type": "text",
                          "request_queues": [
                            {
                              "id": "f58d4671-q777-4e87-96dc-1d41027bebc5",
                              "name": "Queue 2"
                            }
                          ],
                          "duration": 109,
                          "highest_visitor_media_type": "text",
                          "highest_operator_media_type": "text",
                          "used_cobrowsing": false,
                          "ended_at": "2020-05-31T09:48:50.000Z",
                          "end_reason": "transfer"
                        }
                      ]
                    },
                    {
                      "id": "abc12121-e777-43ae-99e0-07a676e9a111",
                      "engagement_type": "reactive",
                      "created_at": "2019-07-07T13:47:21.150Z",
                      "duration": 65,
                      "visitor_name": "Mary Hawkins",
                      "visitor_browser": "Chrome",
                      "visitor_device_type": "mobile",
                      "visitor_id": "c2c9106e-v777-47b2-8db3-089fb49dc9a5",
                      "cobrowsing_used": false,
                      "video_used": false,
                      "audio_used": true,
                      "flagged": false,
                      "queue_wait_time": 10,
                      "platform": "omnicore",
                      "audio_recording_urls": [
                        "https://api.salemove.com/sub_engagements/1234567/conference_recordings/ar56789s-15df-4513-b8d4-b1aff1aa99c9.mp3"
                      ],
                      "crm_forwarded": false,
                      "summary_forwarded": false,
                      "visitor": {
                        "href": "https://api.salemove.com/visitors/c2c9106e-v777-47b2-8db3-089fb49dc9a5"
                      },
                      "chat_transcript": {
                        "href": "https://api.salemove.com/engagements/abc12121-e777-43ae-99e0-07a676e9a111/chat_transcript"
                      },
                      "operators": [
                        {
                          "href": "https://api.salemove.com/operators/ec317122-o666-4b43-996d-34a2ed3b76d8"
                        }
                      ],
                      "queues": [
                        {
                          "id": "f58d4671-q888-4e87-96dc-1d41027bebc5",
                          "name": "Queue 1"
                        }
                      ],
                      "legs": [
                        {
                          "id": "abc12121-c995-45ec-8e0f-5bf4d5e16a2e",
                          "operator": {
                            "id": "ec317122-o666-4b43-996d-34a2ed3b76d8"
                          },
                          "guests": [],
                          "site": {
                            "id": "def34343-s888-43ae-99e0-07a676e9a111"
                          },
                          "requested_at": "2019-07-07T13:47:21.150Z",
                          "accepted_at": "2019-07-07T13:47:35.000Z",
                          "request_type": "reactive",
                          "request_source": "tab",
                          "offered_media_type": "audio",
                          "accepted_media_type": "text",
                          "request_queues": [
                            {
                              "id": "f58d4671-q888-4e87-96dc-1d41027bebc5",
                              "name": "Queue 1"
                            }
                          ],
                          "duration": 55,
                          "highest_visitor_media_type": "audio",
                          "highest_operator_media_type": "audio",
                          "used_cobrowsing": false,
                          "ended_at": "2019-07-07T13:48:30.000Z",
                          "end_reason": "visitor_left"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/engagements/{engagement_id}": {
      "get": {
        "summary": "Fetch engagement",
        "tags": [
          "Engagement"
        ],
        "description": "Fetches a single engagement by `engagement_id`. Can be used to fetch both the ongoing and already ended engagements.\n\n* The user whose credentials are contained in the `Authorization` request header must be authorized to access the\nsite on which the engagement occurred.\n* Note that in case the engagement has multiple legs, they will be listed in the reverse chronological order:\n    - The latest leg is on top of the list.\n    - The first leg is at the bottom of the list.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n\nEngagement successfully retrieved.\n",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Engagement ID.",
                      "example": "abc12121-e888-43ae-99e0-07a676e9a111"
                    },
                    "engagement_type": {
                      "type": "string",
                      "description": "Engagement type.",
                      "enum": [
                        "proactive",
                        "reactive"
                      ],
                      "example": "reactive"
                    },
                    "created_at": {
                      "type": "string",
                      "description": "An ISO-8601 timestamp of when the engagement request was accepted and with that the engagement started.\n",
                      "example": "2020-05-31T09:46:28Z"
                    },
                    "visitor_name": {
                      "type": "string",
                      "description": "Visitor's name.",
                      "example": "John Smith"
                    },
                    "visitor_browser": {
                      "type": "string",
                      "description": "Visitor's browser.",
                      "example": "Chrome"
                    },
                    "visitor_device_type": {
                      "type": "string",
                      "description": "Visitor's device type.",
                      "enum": [
                        "mobile",
                        "computer"
                      ],
                      "example": "mobile"
                    },
                    "visitor_id": {
                      "type": "string",
                      "description": "Visitor ID.",
                      "example": "c2c9106e-v888-47b2-8db3-089fb49dc9a5"
                    },
                    "duration": {
                      "type": "integer",
                      "description": "Engagement's duration in seconds. Is a sum of leg durations. Does not include queue wait times.\nNULL for ongoing engagement.\n",
                      "example": 683
                    },
                    "queue_wait_time": {
                      "type": "integer",
                      "description": "The time visitor spent in queue before the engagement, in seconds.\n\nThis value is present only for reactive engagements started via queueing. Does not include transfer queue wait\ntimes.\n",
                      "example": 42
                    },
                    "audio_recording_urls": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "'https://api.salemove.com/sub_engagements/1234567/conference_recordings/ar56789s-20df-4513-b8d4-b1aff1aa99c9.mp3'\n"
                      },
                      "description": "A list of audio recordings URLs."
                    },
                    "flagged": {
                      "type": "boolean",
                      "description": "Whether the engagement has been flagged or not.",
                      "example": false
                    },
                    "crm_forwarded": {
                      "type": "boolean",
                      "description": "Whether the CRM Export has already occurred or not.",
                      "example": true
                    },
                    "summary_forwarded": {
                      "type": "boolean",
                      "description": "Whether the summary has already been forwarded.",
                      "example": false
                    },
                    "platform": {
                      "type": "string",
                      "description": "The platform where the engagement was initiated.\n\n* `omnibrowse` - engagement was requested from Call Visualizer (either in Glia Hub or embedded in CRM),\n* `omnicore` - all other cases.\n",
                      "enum": [
                        "omnibrowse",
                        "omnicore"
                      ],
                      "example": "omnicore"
                    },
                    "visitor": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "URL of the visitor's information.",
                          "example": "'https://api.salemove.com/sites/def34343-s888-43ae-99e0-07a676e9a111/visitors/c2c9106e-v888-47b2-8db3-089fb49dc9a5'\n"
                        }
                      }
                    },
                    "chat_transcript": {
                      "type": "object",
                      "properties": {
                        "href": {
                          "type": "string",
                          "description": "URL of the engagement's chat transcript.",
                          "example": "'https://api.salemove.com/engagements/abc12121-e888-43ae-99e0-07a676e9a111/chat_transcript'\n"
                        }
                      }
                    },
                    "operators": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "href": {
                            "type": "string",
                            "description": "URL of the participating operator.",
                            "example": "https://api.salemove.com/operators/ec317122-o888-4b43-996d-34a2ed3b76d8"
                          }
                        }
                      }
                    },
                    "source": {
                      "type": "string",
                      "description": "One of the engagement request sources:\n* `button_embed` - (_reactive_) Engagement started via Contact Operator Button.\n* `callout` - (_reactive_) Engagement started via business rules. E.g. a business rule triggered a media\nselector which was then used to start the engagement.\n* `external_call` - (_reactive_) **Deprecated**\n* `facebook` - (_reactive_) Visitor sent message from Facebook Messenger.\n* `hotlink` - (_reactive_) Engagement started via hotlink.\n* `offline_phone` - (_reactive_) Visitor called a phone number.\n* `call_visualizer` - (_proactive_) Engagement started by entering visitor code in Call Visualizer (embedded or Glia Hub).\n* `glia_hub` - (_proactive_) Engagement started by selecting visitor in Visitor List of Glia Hub.\n* `outbound_call` - (_proactive_) Operator called visitor's phone.\n* `outbound_text` - (_proactive_) SMS message was sent to visitor's phone.\n* `sdk` - (_reactive_) Engagement started using the JS SDK, Android SDK or iOS SDK.\n* `slack` - (_reactive_) Engagement started via Slack.\n* `sms` - (_reactive_) Visitor sent SMS message.\n* `tab` - (_reactive_) Engagement started in the browser tab (via the bubble).\n* `visitor_integrator` - (_reactive_) Engagement started by REST API call.\n* `whatsapp` - (_reactive_) Visitor sent message from WhatsApp.\n* `<empty>` - (_proactive_) Engagement was requested by the operator.\n",
                      "enum": [
                        "button_embed",
                        "callout",
                        "external_call",
                        "facebook",
                        "hotlink",
                        "offline_phone",
                        "call_visualizer",
                        "glia_hub",
                        "outbound_call",
                        "outbound_text",
                        "sdk",
                        "slack",
                        "sms",
                        "tab",
                        "visitor_integrator",
                        "whatsapp",
                        "<empty>"
                      ],
                      "example": "tab"
                    },
                    "queues": {
                      "type": "array",
                      "description": "A list of queues that the visitor was enqueued in before starting the engagement. This value is present only\nfor reactive engagements started or transfer was made via queueing.\n",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "ID of the queue.",
                            "example": "f58d4671-q888-4e87-96dc-1d41027bebc5"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the queue.",
                            "example": "Example queue"
                          }
                        }
                      }
                    },
                    "legs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "Engagement leg ID.",
                            "example": "abc12121-c995-45ec-8e0f-5bf4d5e16a2e"
                          },
                          "operator": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "ID of the operator.",
                                "example": "ec317122-o888-4b43-996d-34a2ed3b76d8"
                              }
                            }
                          },
                          "guests": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "Guest ID.",
                                  "example": "ef74940e-1fd8-432c-964f-7f2d940fbd3a"
                                },
                                "type": {
                                  "type": "string",
                                  "description": "Guest type. Currently only `operator` type is supported.",
                                  "enum": [
                                    "operator"
                                  ]
                                },
                                "joined_at": {
                                  "description": "An ISO-8601 timestamp of when the guest joined the engagement leg.\n",
                                  "example": "2020-05-31T09:47:00Z"
                                },
                                "left_at": {
                                  "description": "An ISO-8601 timestamp of when the guest left the engagement leg.\n",
                                  "example": "2020-05-31T09:48:00Z"
                                }
                              }
                            },
                            "description": "A list of guests who participated in an engagement leg.\n"
                          },
                          "site": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "ID of the site where the engagement leg took place.",
                                "example": "def34343-s888-43ae-99e0-07a676e9a111"
                              }
                            }
                          },
                          "accepted_at": {
                            "type": "string",
                            "description": "An ISO-8601 timestamp of when the transfer or engagement request was accepted and thus the engagement leg started.\n",
                            "example": "2020-05-31T09:55:20Z"
                          },
                          "duration": {
                            "type": "integer",
                            "description": "Engagement leg's duration in seconds. Does not include queue wait times. NULL for ongoing engagement leg.\n"
                          },
                          "used_cobrowsing": {
                            "type": "boolean",
                            "description": "Whether CoBrowsing was used or not.",
                            "example": true
                          },
                          "ended_at": {
                            "type": "string",
                            "description": "ISO-8601 timestamp when engagement/leg was ended or when engagement was transferred out.\n",
                            "example": "2020-05-31T10:02:18Z"
                          },
                          "end_reason": {
                            "type": "string",
                            "description": "Engagement leg end reason. NULL for ongoing engagement.",
                            "enum": [
                              "visitor_left",
                              "visitor_hung_up",
                              "operator_left",
                              "operator_hung_up",
                              "error",
                              "transfer"
                            ],
                            "example": "visitor_hung_up"
                          },
                          "requested_at": {
                            "type": "string",
                            "description": "An ISO-8601 timestamp of when the engagement or transfer was requested.\n",
                            "example": "2020-05-31T09:55:13Z"
                          },
                          "request_type": {
                            "type": "string",
                            "description": "Request type that began the engagement leg.",
                            "enum": [
                              "proactive",
                              "reactive",
                              "transfer"
                            ],
                            "example": "transfer"
                          },
                          "offered_media_type": {
                            "type": "string",
                            "description": "Engagement offered or requested media type.",
                            "enum": [
                              "text",
                              "audio",
                              "phone",
                              "video"
                            ]
                          },
                          "accepted_media_type": {
                            "type": "string",
                            "description": "Engagement accepted media type.",
                            "enum": [
                              "text",
                              "audio",
                              "phone",
                              "video"
                            ]
                          },
                          "request_queues": {
                            "type": "array",
                            "description": "A list of queues that the visitor was enqueued in before starting the engagement. This value is present only\nfor reactive engagements started or transfer was made via queueing.\n",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "ID of the queue.",
                                  "example": "f58d4671-q888-4e87-96dc-1d41027bebc5"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the queue.",
                                  "example": "Example queue"
                                }
                              }
                            }
                          },
                          "queue_wait_time": {
                            "type": "integer",
                            "description": "Time spent in queue preceding this engagement leg (in seconds). NULL if queues were not used.\n",
                            "example": 3
                          },
                          "request_source": {
                            "type": "string",
                            "description": "One of the engagement request sources:\n* `button_embed` - (_reactive_) Engagement started via Contact Operator Button.\n* `callout` - (_reactive_) Engagement started via business rules. E.g. a business rule triggered a media\nselector which was then used to start the engagement.\n* `external_call` - (_reactive_) **Deprecated**\n* `facebook` - (_reactive_) Visitor sent message from Facebook Messenger.\n* `hotlink` - (_reactive_) Engagement started via hotlink.\n* `offline_phone` - (_reactive_) Visitor called a phone number.\n* `call_visualizer` - (_proactive_) Engagement started by entering visitor code in Call Visualizer (embedded or Glia Hub).\n* `glia_hub` - (_proactive_) Engagement started by selecting visitor in Visitor List of Glia Hub.\n* `outbound_call` - (_proactive_) Operator called visitor's phone.\n* `outbound_text` - (_proactive_) SMS message was sent to visitor's phone.\n* `sdk` - (_reactive_) Engagement started using the JS SDK, Android SDK or iOS SDK.\n* `slack` - (_reactive_) Engagement started via Slack.\n* `sms` - (_reactive_) Visitor sent SMS message.\n* `tab` - (_reactive_) Engagement started in the browser tab (via the bubble).\n* `visitor_integrator` - (_reactive_) Engagement started by REST API call.\n* `whatsapp` - (_reactive_) Visitor sent message from WhatsApp.\n* `<empty>` - (_proactive_) Engagement was requested by the operator.\n",
                            "enum": [
                              "button_embed",
                              "callout",
                              "external_call",
                              "facebook",
                              "hotlink",
                              "offline_phone",
                              "call_visualizer",
                              "glia_hub",
                              "outbound_call",
                              "outbound_text",
                              "sdk",
                              "slack",
                              "sms",
                              "tab",
                              "visitor_integrator",
                              "whatsapp",
                              "<empty>"
                            ],
                            "example": "tab"
                          },
                          "highest_visitor_media_type": {
                            "type": "string",
                            "description": "Highest media type visitor used during this engagement leg.",
                            "enum": [
                              "text",
                              "audio",
                              "video"
                            ]
                          },
                          "highest_operator_media_type": {
                            "type": "string",
                            "description": "Highest media type operator used during this engagement leg.",
                            "enum": [
                              "text",
                              "audio",
                              "video"
                            ]
                          }
                        },
                        "required": [
                          "id",
                          "operator",
                          "site",
                          "accepted_at",
                          "duration",
                          "used_cobrowsing",
                          "ended_at",
                          "end_reason",
                          "requested_at",
                          "request_type",
                          "offered_media_type",
                          "accepted_media_type",
                          "request_queues",
                          "queue_wait_time",
                          "request_source",
                          "highest_visitor_media_type",
                          "highest_operator_media_type"
                        ]
                      },
                      "description": "A list of engagement legs.\n\nEngagement starts with one leg. A leg is added each time the engagement is transferred.\n"
                    },
                    "cobrowsing_used": {
                      "type": "boolean",
                      "description": "Whether CoBrowsing was used or not.",
                      "example": true
                    },
                    "video_used": {
                      "type": "boolean",
                      "description": "Whether video was used or not.",
                      "example": true
                    },
                    "audio_used": {
                      "type": "boolean",
                      "description": "Whether audio was used or not.",
                      "example": true
                    }
                  },
                  "required": [
                    "id",
                    "engagement_type",
                    "created_at",
                    "visitor_name",
                    "visitor_browser",
                    "visitor_device_type",
                    "visitor_id",
                    "duration",
                    "audio_recording_urls",
                    "flagged",
                    "crm_forwarded",
                    "summary_forwarded",
                    "platform",
                    "visitor",
                    "chat_transcript",
                    "operators",
                    "legs",
                    "cobrowsing_used",
                    "video_used",
                    "audio_used"
                  ]
                },
                "example": {
                  "id": "abc12121-e888-43ae-99e0-07a676e9a111",
                  "engagement_type": "reactive",
                  "created_at": "2020-05-31T09:46:28.000Z",
                  "duration": 268,
                  "visitor_name": "John Smith",
                  "visitor_browser": "Chrome",
                  "visitor_device_type": "mobile",
                  "visitor_id": "c2c9106e-v888-47b2-8db3-089fb49dc9a5",
                  "cobrowsing_used": true,
                  "video_used": true,
                  "audio_used": true,
                  "flagged": false,
                  "queue_wait_time": 42,
                  "platform": "omnicore",
                  "audio_recording_urls": [
                    "https://api.salemove.com/sub_engagements/1234567/conference_recordings/ar56789s-20df-4513-b8d4-b1aff1aa99c9.mp3"
                  ],
                  "crm_forwarded": false,
                  "summary_forwarded": false,
                  "visitor": {
                    "href": "https://api.salemove.com/visitors/c2c9106e-v888-47b2-8db3-089fb49dc9a5"
                  },
                  "chat_transcript": {
                    "href": "https://api.salemove.com/engagements/abc12121-e888-43ae-99e0-07a676e9a111/chat_transcript"
                  },
                  "operators": [
                    {
                      "href": "https://api.salemove.com/operators/ec317122-o888-4b43-996d-34a2ed3b76d8"
                    },
                    {
                      "href": "https://api.salemove.com/operators/ec317122-o777-4b43-996d-34a2ed3b76d8"
                    }
                  ],
                  "queues": [
                    {
                      "id": "f58d4671-q888-4e87-96dc-1d41027bebc5",
                      "name": "Queue 1"
                    }
                  ],
                  "legs": [
                    {
                      "id": "cde12121-c207-45ec-8e0f-5bf4d5e16a2e",
                      "operator": {
                        "id": "ec317122-o777-4b43-996d-34a2ed3b76d8"
                      },
                      "guests": [
                        {
                          "id": "9beacfd3-fb36-4a40-827b-6c7c26d34022",
                          "type": "operator",
                          "joined_at": "2020-05-31T09:49:20.000Z",
                          "left_at": "2020-05-31T09:50:10.000Z"
                        }
                      ],
                      "site": {
                        "id": "def34343-s888-43ae-99e0-07a676e9a111"
                      },
                      "requested_at": "2020-05-31T09:48:50.000Z",
                      "accepted_at": "2020-05-31T09:48:57.000Z",
                      "request_type": "transfer",
                      "request_source": null,
                      "offered_media_type": "text",
                      "accepted_media_type": "text",
                      "request_queues": null,
                      "duration": 158,
                      "highest_visitor_media_type": "video",
                      "highest_operator_media_type": "audio",
                      "used_cobrowsing": true,
                      "ended_at": "2020-05-31T09:51:28.000Z",
                      "end_reason": "visitor_left"
                    },
                    {
                      "id": "bcd12121-c106-45ec-8e0f-5bf4d5e16a2e",
                      "operator": {
                        "id": "ec317122-o888-4b43-996d-34a2ed3b76d8"
                      },
                      "site": {
                        "id": "def34343-s888-43ae-99e0-07a676e9a111"
                      },
                      "requested_at": "2020-05-31T09:46:28.000Z",
                      "accepted_at": "2020-05-31T09:47:01.000Z",
                      "request_type": "reactive",
                      "request_source": "tab",
                      "offered_media_type": "video",
                      "accepted_media_type": "text",
                      "request_queues": [
                        {
                          "id": "f58d4671-q777-4e87-96dc-1d41027bebc5",
                          "name": "Queue 2"
                        }
                      ],
                      "duration": 109,
                      "highest_visitor_media_type": "text",
                      "highest_operator_media_type": "text",
                      "used_cobrowsing": false,
                      "ended_at": "2020-05-31T09:48:50.000Z",
                      "end_reason": "transfer"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update engagement",
        "tags": [
          "Engagement"
        ],
        "description": "Updates the engagement using various actions.\nFor example, ends or transfers the engagement or reports a technical issue related to it.\n\n* End the engagement:\n    - Set the `action` to `end`.\n    - If the participant application suffered an error when starting the engagement, provide `error` as the\n`reason` for ending the engagement to distinguish such failures from engagement ending normally.\n    - Participating operator, visitor or engagement site(s) manager can end the engagement.\n* Transfer the engagement to a guest operator:\n    - Set the `action` to `transfer_to_guest`.\n    - Participating operator or engagement site(s) manager can transfer the engagement to guest operator.\n* Transfer the engagement to an external phone number:\n    - Set the `action` to `transfer_out`.\n    - Participating operator or engagement site(s) manager can transfer the engagement to a phone.\n* Report a technical issue with the engagement:\n    - Set the `action` to `mark_flagged`.\n    - Participating operator or engagement site(s) manager can report a technical issue.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          }
        ],
        "requestBody": {
          "required": true,
          "description": "There are multiple schemas available depending on the action. Please\nchoose schema type to see available body parameters.\n",
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "title": "End the engagement",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "description": "Must be `end`.",
                        "enum": [
                          "end"
                        ]
                      },
                      "reason": {
                        "type": "string",
                        "description": "Engagement's end reason.",
                        "enum": [
                          "error",
                          "visitor_left",
                          "operator_left",
                          "visitor_hung_up",
                          "operator_hung_up",
                          "transferred_out"
                        ]
                      }
                    },
                    "required": [
                      "action"
                    ]
                  },
                  {
                    "title": "Transfer to a guest",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "description": "Must be `transfer_to_guest`.",
                        "enum": [
                          "transfer_to_guest"
                        ]
                      },
                      "guest_id": {
                        "type": "string",
                        "description": "ID of the guest operator that the engagement is transferred to.\n"
                      },
                      "stay_as_guest": {
                        "type": "boolean",
                        "description": "Whether the current host operator stays in the engagement as a guest after transfer is complete.\n"
                      }
                    },
                    "required": [
                      "action",
                      "guest_id",
                      "stay_as_guest"
                    ]
                  },
                  {
                    "title": "Transfer to an external phone number",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "description": "Must be `transfer_out`.",
                        "enum": [
                          "transfer_out"
                        ]
                      },
                      "phone_number": {
                        "type": "string",
                        "description": "Phone number to transfer the engagement to. Must be in [E.164](doc:glossary#phone-number) format.\n",
                        "example": "+12057543010"
                      },
                      "phone_extension": {
                        "type": "string",
                        "description": "Phone number extension.\n",
                        "example": "1234"
                      }
                    },
                    "required": [
                      "action",
                      "phone_number"
                    ]
                  },
                  {
                    "title": "Report a technical issue with the engagement",
                    "type": "object",
                    "properties": {
                      "action": {
                        "type": "string",
                        "description": "Must be `mark_flagged`.",
                        "enum": [
                          "mark_flagged"
                        ]
                      },
                      "description": {
                        "type": "string",
                        "description": "Description of the issue.\n"
                      }
                    },
                    "required": [
                      "action",
                      "description"
                    ]
                  }
                ]
              },
              "examples": {
                "Ending the engagement": {
                  "value": {
                    "action": "end"
                  }
                },
                "Transferring to a guest": {
                  "value": {
                    "action": "transfer_to_guest",
                    "guest_id": "ec317122-o777-4b43-996d-34a2ed3b76d8",
                    "stay_as_guest": true
                  }
                },
                "Transferring to an external phone number": {
                  "value": {
                    "action": "transfer_out",
                    "phone_number": "+12057543010",
                    "phone_extension": "1234"
                  }
                },
                "Reporting a technical issue": {
                  "value": {
                    "action": "mark_flagged",
                    "description": "Video quality was low."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/engagements/{engagement_id}/export": {
      "post": {
        "summary": "Export engagement",
        "tags": [
          "Engagement"
        ],
        "description": "Exports the identified engagement. The format and destination of the export are specified by the configuration of\nthe site on which the engagement began.\n\nThe user whose credentials are contained in the `Authorization` request header must be authorized to access the\nsite on which the identified engagement occurred. If the engagement is transferred to other sites, and the\nrequesting user does not have access to all of them, then the export will contain only the data that belongs to\nthe site(s) for which the user is authorized.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n\nEngagement successfully exported.\n",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates if the engagement was exported successfully or not.\n",
                      "enum": [
                        false,
                        true
                      ]
                    }
                  },
                  "required": [
                    "success"
                  ]
                },
                "example": {
                  "success": true
                }
              }
            }
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          }
        }
      }
    },
    "/engagement_requests": {
      "post": {
        "summary": "Create engagement request",
        "tags": [
          "Engagement request"
        ],
        "description": "Creates an engagement request and notifies the target operator or visitor. Note that the request body needs\ndifferent properties based on the requester.\n\n## Authorization\n\nEngagement requests can be created by\n\n* operators using the Glia platform;\n* visitors with a Glia session (e.g present on a Glia enabled site using a web browser);\n* visitors from external systems - Glia integrators.\n\n### Operators using the glia platform\n\nOperators using the Glia system are provided an API token upon the user's creation. When creating engagement\nrequest, the `Authorization` header must contain the user's bearer access token.\n\n```bash\n  curl --request POST \\\n    --header \"Authorization: Bearer $access_token\" \\\n    --header \"Accept: application/vnd.salemove.v1+json\" \\\n    --header \"Content-Type: application/json\" \\\n    --data-binary '{\n      \"visitor_id\": \"c2c9106e-v888-47b2-8db3-089fb49dc9a5\",\n      \"site_id\": \"def34343-s888-43ae-99e0-07a676e9a111\",\n      \"media\": \"text\"\n    }' \\\n  \"https://api.salemove.com/engagement_requests\"\n```\n\n### Visitors with a Glia session\n\nVisitors connected to a Glia enabled site using a web browser are provided session IDs to uniquely identify the\nvisitor and the site.\n\nCurrently, there is no way to register visitor sessions as an integrator using the REST API, instead use the\nvisitors from the [external system](#visitors-from-external-systems) method.\n\nWhen creating an engagement request, the `Authorization` header must contain the visitor's session ID and the\n`X-Salemove-Visit-Session-Id` headers must contain the visitor's visit session ID. These headers are set\nautomatically when creating engagement requests using the [Visitor JS SDK](https://sdk-docs.glia.com/visitor-js-api/current).\n\n```bash\n  curl --request POST \\\n    --header \"Authorization: Bearer $visitor_access_token\" \\\n    --header \"Accept: application/vnd.salemove.v1+json\" \\\n    --header \"Content-Type: application/json\" \\\n    --data-binary '{\n      \"operator_id\": \"ec317122-o888-4b43-996d-34a2ed3b76d8\",\n      \"media\": \"text\",\n      \"site_id\": \"def34343-s888-43ae-99e0-07a676e9a111\",\n      \"source\": \"sdk\"\n    }' \\\n  \"https://api.salemove.com/engagement_requests\"\n```\n\n### Visitors from external systems\n\nIntegrators of the Glia system might want to engage operators with visitors outside of the context of a web\nbrowser or without using the [Visitor JS SDK](https://sdk-docs.glia.com/visitor-js-api/current).\nIn this case the integrator can create a visitor using [REST API](#ref:visitor#post_visitors).\n\nCreating an engagement request on behalf of the visitor requires:\n\n* `visitor_integrator` as a source value,\n* bearer token gotten from the response when creating the visitor\n([`POST https://api.salemove.com/visitors/{visitor_id}/token`](#ref:visitor#post_visitors), `access_token` keyword).\n\n```bash\n  curl --request POST \\\n    --header \"Authorization: Bearer $visitor_access_token\" \\\n    --header \"Accept: application/vnd.salemove.v1+json\" \\\n    --header \"Content-Type: application/json\" \\\n    --data-binary '{\n      \"operator_id\": \"c62b4a91-a0d7-4137-80e3-c281393b71c2\",\n      \"media\": \"text\",\n      \"site_id\": \"51138845-3c46-4c21-8bd8-1cf45957f62e\",\n      \"source\": \"visitor_integrator\"\n    }' \\\n  \"https://api.salemove.com/engagement_requests\"\n```\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "title": "Operator creates request",
                    "type": "object",
                    "properties": {
                      "visitor_id": {
                        "type": "string",
                        "description": "The ID of the visitor who the request will be sent to, in case the request is made by the operator.\n"
                      },
                      "operator_id": {
                        "type": "string",
                        "description": "The ID of the operator who the request will be sent to, in case the request is made by the visitor or visitor\nintegrator.\n"
                      },
                      "site_id": {
                        "type": "string",
                        "description": "The site ID of the visitor who the request will be sent to.\n"
                      },
                      "media": {
                        "type": "string",
                        "description": "The initial engagement media type.\n\nCan only be `text` or `phone` if the request is made by a visitor integrator.\n",
                        "enum": [
                          "text",
                          "phone",
                          "audio",
                          "video"
                        ]
                      },
                      "media_options": {
                        "type": "object",
                        "description": "Any additional parameters for the desired media type.\n",
                        "properties": {
                          "phone_number": {
                            "type": "string",
                            "description": "Phone number of the user. The supported format is [E.164](doc:glossary#phone-number).\nMust be set if `audio_source` is `phone`.\n"
                          },
                          "phone_extension": {
                            "type": "string",
                            "description": "The phone number extension of the user.\n\nA valid extension contains 1-7 digits and any number of `,` characters.\n\nThere is an initial two second delay time before the first extension character is processed. Each `,` character\nin the extension adds a two second wait time before the next character is processed. Maximum length is 25\ncharacters.\n\nValid only if `phone` is also set or was set beforehand.\n"
                          },
                          "one_way": {
                            "type": "boolean",
                            "description": "* When set to `true`, the video will start from the operator to the visitor only.\n* When set to `false`, the video starts both ways - from the operator to the visitor and from the visitor\nto the operator.\n",
                            "default": true
                          }
                        }
                      },
                      "source": {
                        "type": "string",
                        "description": "One of the engagement request sources:\n* `button_embed` - (_reactive_) Engagement started via Contact Operator Button.\n* `callout` - (_reactive_) Engagement started via business rules. E.g. a business rule triggered a media\nselector which was then used to start the engagement.\n* `external_call` - (_reactive_) **Deprecated**\n* `facebook` - (_reactive_) Visitor sent message from Facebook Messenger.\n* `hotlink` - (_reactive_) Engagement started via hotlink.\n* `offline_phone` - (_reactive_) Visitor called a phone number.\n* `call_visualizer` - (_proactive_) Engagement started by entering visitor code in Call Visualizer (embedded or Glia Hub).\n* `glia_hub` - (_proactive_) Engagement started by selecting visitor in Visitor List of Glia Hub.\n* `outbound_call` - (_proactive_) Operator called visitor's phone.\n* `outbound_text` - (_proactive_) SMS message was sent to visitor's phone.\n* `sdk` - (_reactive_) Engagement started using the JS SDK, Android SDK or iOS SDK.\n* `slack` - (_reactive_) Engagement started via Slack.\n* `sms` - (_reactive_) Visitor sent SMS message.\n* `tab` - (_reactive_) Engagement started in the browser tab (via the bubble).\n* `visitor_integrator` - (_reactive_) Engagement started by REST API call.\n* `whatsapp` - (_reactive_) Visitor sent message from WhatsApp.\n* `<empty>` - (_proactive_) Engagement was requested by the operator.\n",
                        "enum": [
                          "button_embed",
                          "callout",
                          "external_call",
                          "facebook",
                          "hotlink",
                          "offline_phone",
                          "call_visualizer",
                          "glia_hub",
                          "outbound_call",
                          "outbound_text",
                          "sdk",
                          "slack",
                          "sms",
                          "tab",
                          "visitor_integrator",
                          "whatsapp",
                          "<empty>"
                        ],
                        "example": "tab"
                      },
                      "webhooks": {
                        "type": "array",
                        "description": "A list of webhooks that will subscribe to engagement request or engagement events.\n\nOnly events regarding this engagement request and the engagement that is created by accepting this engagement\nrequest will be sent. Webhooks can have overlapping sets of events. A maximum of 10 webhooks are allowed.\n\nSee also [Webhooks](ref:webhooks).\n",
                        "items": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "description": "Webhook URL, see [HTTP webhooks](ref:webhooks#registering)."
                            },
                            "method": {
                              "type": "string",
                              "description": "One of the HTTP methods, see [HTTP webhooks](ref:webhooks#registering).\n"
                            },
                            "events": {
                              "type": "array",
                              "description": "Array of events, see see [HTTP webhooks](ref:webhooks#registering).\n",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      }
                    },
                    "required": [
                      "visitor_id",
                      "site_id",
                      "media"
                    ]
                  },
                  {
                    "title": "Visitor creates request",
                    "type": "object",
                    "properties": {
                      "visitor_id": {
                        "type": "string",
                        "description": "The ID of the visitor who the request will be sent to, in case the request is made by the operator.\n"
                      },
                      "operator_id": {
                        "type": "string",
                        "description": "The ID of the operator who the request will be sent to, in case the request is made by the visitor or visitor\nintegrator.\n"
                      },
                      "site_id": {
                        "type": "string",
                        "description": "The site ID of the visitor who the request will be sent to.\n"
                      },
                      "media": {
                        "type": "string",
                        "description": "The initial engagement media type.\n\nCan only be `text` or `phone` if the request is made by a visitor integrator.\n",
                        "enum": [
                          "text",
                          "phone",
                          "audio",
                          "video"
                        ]
                      },
                      "media_options": {
                        "type": "object",
                        "description": "Any additional parameters for the desired media type.\n",
                        "properties": {
                          "phone_number": {
                            "type": "string",
                            "description": "Phone number of the user. The supported format is [E.164](doc:glossary#phone-number).\nMust be set if `audio_source` is `phone`.\n"
                          },
                          "phone_extension": {
                            "type": "string",
                            "description": "The phone number extension of the user.\n\nA valid extension contains 1-7 digits and any number of `,` characters.\n\nThere is an initial two second delay time before the first extension character is processed. Each `,` character\nin the extension adds a two second wait time before the next character is processed. Maximum length is 25\ncharacters.\n\nValid only if `phone` is also set or was set beforehand.\n"
                          },
                          "one_way": {
                            "type": "boolean",
                            "description": "* When set to `true`, the video will start from the operator to the visitor only.\n* When set to `false`, the video starts both ways - from the operator to the visitor and from the visitor\nto the operator.\n",
                            "default": true
                          }
                        }
                      },
                      "source": {
                        "type": "string",
                        "description": "One of the engagement request sources:\n* `button_embed` - (_reactive_) Engagement started via Contact Operator Button.\n* `callout` - (_reactive_) Engagement started via business rules. E.g. a business rule triggered a media\nselector which was then used to start the engagement.\n* `external_call` - (_reactive_) **Deprecated**\n* `facebook` - (_reactive_) Visitor sent message from Facebook Messenger.\n* `hotlink` - (_reactive_) Engagement started via hotlink.\n* `offline_phone` - (_reactive_) Visitor called a phone number.\n* `call_visualizer` - (_proactive_) Engagement started by entering visitor code in Call Visualizer (embedded or Glia Hub).\n* `glia_hub` - (_proactive_) Engagement started by selecting visitor in Visitor List of Glia Hub.\n* `outbound_call` - (_proactive_) Operator called visitor's phone.\n* `outbound_text` - (_proactive_) SMS message was sent to visitor's phone.\n* `sdk` - (_reactive_) Engagement started using the JS SDK, Android SDK or iOS SDK.\n* `slack` - (_reactive_) Engagement started via Slack.\n* `sms` - (_reactive_) Visitor sent SMS message.\n* `tab` - (_reactive_) Engagement started in the browser tab (via the bubble).\n* `visitor_integrator` - (_reactive_) Engagement started by REST API call.\n* `whatsapp` - (_reactive_) Visitor sent message from WhatsApp.\n* `<empty>` - (_proactive_) Engagement was requested by the operator.\n",
                        "enum": [
                          "button_embed",
                          "callout",
                          "external_call",
                          "facebook",
                          "hotlink",
                          "offline_phone",
                          "call_visualizer",
                          "glia_hub",
                          "outbound_call",
                          "outbound_text",
                          "sdk",
                          "slack",
                          "sms",
                          "tab",
                          "visitor_integrator",
                          "whatsapp",
                          "<empty>"
                        ],
                        "example": "tab"
                      },
                      "webhooks": {
                        "type": "array",
                        "description": "A list of webhooks that will subscribe to engagement request or engagement events.\n\nOnly events regarding this engagement request and the engagement that is created by accepting this engagement\nrequest will be sent. Webhooks can have overlapping sets of events. A maximum of 10 webhooks are allowed.\n\nSee also [Webhooks](ref:webhooks).\n",
                        "items": {
                          "type": "object",
                          "properties": {
                            "url": {
                              "type": "string",
                              "description": "Webhook URL, see [HTTP webhooks](ref:webhooks#registering)."
                            },
                            "method": {
                              "type": "string",
                              "description": "One of the HTTP methods, see [HTTP webhooks](ref:webhooks#registering).\n"
                            },
                            "events": {
                              "type": "array",
                              "description": "Array of events, see see [HTTP webhooks](ref:webhooks#registering).\n",
                              "items": {
                                "type": "string"
                              }
                            }
                          }
                        }
                      },
                      "visitor_context": {
                        "type": "object",
                        "description": "When the visitor is not capable of CoBrowsing, e.g. they called in via phone, the CoBrowsing area can be re-purposed to display extra information to the operator.\nFor example, when a phone number is associated with a specific promotion, a PDF file describing the promotion can be displayed.\nThe visitor context can either contain an URL to a web page or an illustration file.\nThe illustration file can be of any type that can be embedded in an iframe in the operator's web browser.\n",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Either a (web) page or an illustration file. When providing an illustration file, it is also recommended to include `content_type`.\n",
                            "enum": [
                              "page",
                              "illustration"
                            ]
                          },
                          "url": {
                            "type": "string",
                            "description": "URL pointing to the context, must be secure (HTTPS).\n",
                            "example": "https://example.com/context.pdf"
                          },
                          "content_type": {
                            "type": "string",
                            "description": "MIME type of the illustration file. For example: `application/pdf`.\n",
                            "example": "application/pdf"
                          },
                          "name": {
                            "type": "string",
                            "description": "Context name. Displayed to the operator when provided.\n"
                          }
                        },
                        "required": [
                          "type",
                          "url"
                        ]
                      }
                    },
                    "required": [
                      "operator_id",
                      "site_id",
                      "media"
                    ]
                  }
                ]
              },
              "examples": {
                "operator": {
                  "summary": "Operator creates the engagement request",
                  "value": {
                    "visitor_id": "c2c9106e-v888-47b2-8db3-089fb49dc9a5",
                    "site_id": "def34343-s888-43ae-99e0-07a676e9a111",
                    "media": "audio"
                  }
                },
                "visitor": {
                  "summary": "Visitor creates the engagement request",
                  "value": {
                    "operator_id": "ec317122-o888-4b43-996d-34a2ed3b76d8",
                    "site_id": "def34343-s888-43ae-99e0-07a676e9a111",
                    "media": "text"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The engagement request successfully created.\n\nNote the `timeout` field that shows in how many seconds (counting from the moment that Glia servers\nreceived the request) the engagement request will automatically time out unless the engagement request is\naccepted, acknowledged, canceled, or declined.\n",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "ID of the engagement request to be accepted, declined, acknowledged, or canceled.\n"
                    },
                    "timeout": {
                      "type": "string",
                      "description": "ID of the engagement request to be accepted, declined, acknowledged, or canceled.\n"
                    },
                    "site_id": {
                      "type": "string",
                      "description": "The site ID of the visitor who the request will be sent to.\n"
                    },
                    "platform": {
                      "type": "string",
                      "description": "Is the request created in Glia Hub or in Call Visualizer.\n\n* `omnicore` - Glia Hub\n* `omnibrowse` - Call Visualizer\n",
                      "enum": [
                        "omnicore",
                        "omnibrowse"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "timeout",
                    "site_id",
                    "platform"
                  ]
                },
                "example": {
                  "id": "defb7236-r888-4fe8-b26c-fc462e286907",
                  "timeout": 30,
                  "site_id": "def34343-s888-43ae-99e0-07a676e9a111",
                  "platform": "omnicore"
                }
              }
            }
          }
        }
      }
    },
    "/engagement_requests/{engagement_request_id}": {
      "patch": {
        "summary": "Answer engagement request",
        "tags": [
          "Engagement request"
        ],
        "description": "Accepts, declines, or cancels a pending engagement request. If accepted, also starts an engagement.\n\n* Accept or decline\n    - Only the recipient of the engagement request can accept and decline it, i.e if an engagement request was\nsent by operator O to visitor V, then only visitor V is authorized to accept or decline the engagement request.\n* Cancel\n    - Only the originator of the engagement request can cancel it  i.e if an engagement request was sent by\nvisitor V to operator O, then only visitor V is allowed to cancel the engagement request  Note that if an\nengagement is already started, canceling the engagement request will end the engagement instead. This\nfunctionality is provided due to possible data races between accepting and canceling an engagement request.\n",
        "parameters": [
          {
            "name": "engagement_request_id",
            "in": "path",
            "description": "Engagement request ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "defb7236-r888-4fe8-b26c-fc462e286907"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "Either accept, decline, or cancel the engagement request.",
                    "enum": [
                      "accept",
                      "decline",
                      "cancel"
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "\nEngagement request successfully accepted, declined or cancelled.\n",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "Engagement request accepted.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "ID of the engagement request."
                        },
                        "engagement_id": {
                          "type": "string",
                          "description": "ID of the engagement."
                        },
                        "sub_engagement_id": {
                          "type": "string",
                          "description": "ID of the first engagement leg."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Engagement request declined.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "ID of the engagement request."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Engagement request cancelled.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "ID of the engagement request."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "accept": {
                    "summary": "The engagement request was accepted",
                    "value": {
                      "id": "defb7236-r888-4fe8-b26c-fc462e286907",
                      "engagement_id": "abc12121-e888-43ae-99e0-07a676e9a111",
                      "sub_engagement:id": "def34343-c995-43ae-99e0-07a676e9a111"
                    }
                  },
                  "decline": {
                    "summary": "The engagement request was declined",
                    "value": {
                      "id": "defb7236-r888-4fe8-b26c-fc462e286907"
                    }
                  },
                  "cancel": {
                    "summary": "The engagement request was canceled",
                    "value": {
                      "id": "defb7236-r888-4fe8-b26c-fc462e286907"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/engagements/{engagement_id}/transfer_requests": {
      "post": {
        "summary": "Create transfer request",
        "tags": [
          "Transfer"
        ],
        "description": "Creates a transfer request and notifies the target operator.\nCan be performed by the engagement host operator.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          }
        ],
        "requestBody": {
          "description": "Parameters for creating the transfer request.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "operator_id": {
                    "type": "string",
                    "description": "The ID of the operator who the request will be sent to.\n",
                    "example": "ec317122-o888-4b43-996d-34a2ed3b76d8"
                  },
                  "site_id": {
                    "type": "string",
                    "description": "The site ID on which the engagement continues. The site must be the current engagement site or transferrable from\nthe current engagement site. Should the engagement end, survey and export configuration from the provided site is used.\n",
                    "example": "def34343-s888-43ae-99e0-07a676e9a111"
                  },
                  "media": {
                    "type": "string",
                    "description": "The media type with which the engagement continues. The target operator must be available for the specified media.\nVisitor media type is retained or reduced to match the operator media level.\n",
                    "enum": [
                      "text",
                      "phone",
                      "audio",
                      "video"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "A message for the receiving operator. Used to give context about the engagement.\n"
                  },
                  "webhooks": {
                    "description": "Can only be provided when creating a transfer request or when updating it with the `accept` action.\n\n* Creating a transfer request:\n  * The requester can get notified when the status of the transfer request changes.\n\n* Updating a transfer request with the `accept` action:\n  * The target of the transfer request can get notified when the transfer completes and can also also register\n  hooks for engagement events that occur after the transfer.\n* When transfer request is accepted, `engagement.transfer_request.accepted` event is fired.\n* When transfer request is confirmed, `engagement.transfer` event is fired.\n\nSee [Webhooks](ref:webhooks) section for more information.\n",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "HTTP Webhook",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "The URL (including protocol) to which the HTTP request will be sent to.\n",
                          "example": "https://example.com"
                        },
                        "method": {
                          "type": "string",
                          "description": "The HTTP method that will be used for the HTTP request.",
                          "example": "POST"
                        },
                        "headers": {
                          "type": "object",
                          "description": "An arbitrary object which will be used to set request headers for the HTTP request. The keys of the object\nwill be used as header names and values as header values. This can be used to authenticate incoming HTTP\nrequests in your server.\n",
                          "example": {
                            "Authorization": "value"
                          }
                        },
                        "events": {
                          "type": "array",
                          "description": "An array of events (at least one) upon which a HTTP request will be made.\n",
                          "items": {
                            "type": "string",
                            "example": "engagement.start"
                          }
                        }
                      },
                      "required": [
                        "url",
                        "method",
                        "events"
                      ]
                    }
                  },
                  "skip_confirmation": {
                    "type": "boolean",
                    "description": "Whether the initiator of the transfer request must confirm the transfer after the target operator has accepted the\nrequest.\n\nIf true, the engagement is transferred immediately when the target operator accepts the transfer request.\n",
                    "default": false
                  }
                },
                "required": [
                  "operator_id",
                  "site_id",
                  "media"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The transfer request successfully created.\n",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Transfer request ID.",
                      "example": "defb7236-r888-4fe8-b26c-fc462e286907"
                    },
                    "timeout": {
                      "type": "number",
                      "description": "After how many seconds after the request is created in Glia servers, the\ntransfer request is timed out unless it has been accepted, declined or\ncanceled.\n",
                      "example": 30
                    }
                  },
                  "required": [
                    "id",
                    "timeout"
                  ]
                },
                "example": {
                  "id": "defb7236-r888-4fe8-b26c-fc462e286907",
                  "timeout": 30
                }
              }
            }
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Your bearer token is valid but you have no access to the requested resource.\n"
          },
          "422": {
            "description": "Invalid input. Check if the request is correct."
          },
          "500": {
            "description": "Internal server error has occurred. Please try again later."
          },
          "503": {
            "description": "The service is temporarily unavailable. Please try again later.\n"
          }
        }
      }
    },
    "/engagements/{engagement_id}/transfer_requests/{transfer_request_id}": {
      "get": {
        "summary": "Fetch transfer request",
        "tags": [
          "Transfer"
        ],
        "description": "Fetches the transfer request.\n\nCan be requested by a user who initiated the request to see the state of the transfer request.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          },
          {
            "name": "transfer_request_id",
            "in": "path",
            "description": "Transfer request ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "defb7236-r888-4fe8-b26c-fc462e286907"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Transfer request ID.",
                      "example": "defb7236-r888-4fe8-b26c-fc462e286907"
                    },
                    "outcome": {
                      "type": "string",
                      "description": "Outcome of the transfer request.",
                      "enum": [
                        "requested",
                        "accepted",
                        "confirmed",
                        "declined",
                        "canceled",
                        "timed_out"
                      ],
                      "example": "requested"
                    }
                  },
                  "required": [
                    "id",
                    "outcome"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Your bearer token is valid but you have no access to the requested resource.\n"
          },
          "404": {
            "description": "The requested resource was not found. Check the request's parameters.\n"
          },
          "500": {
            "description": "Internal server error has occurred. Please try again later."
          },
          "503": {
            "description": "The service is temporarily unavailable. Please try again later.\n"
          }
        }
      },
      "patch": {
        "summary": "Answer transfer request",
        "tags": [
          "Transfer"
        ],
        "description": "Accepts, declines, cancels or confirms a pending transfer request. If confirmed (or accepted and confirmation is\nskipped), completes the transfer.\n\n* Accept or decline\n    - Only the recipient of the transfer request can accept and decline it, i.e. if a transfer request was sent by\n      operator O1 to operator O2, then only operator O2 is authorized to accept or decline the engagement request.\n* Cancel\n    - Only the originator of the transfer request can cancel it, i.e. if a transfer request was sent by operator O1\n      to operator O2, then only operator O1 is allowed to cancel the transfer request.\n* Confirm\n    - Only the originator of the transfer request can confirm it. The engagement transfer is completed after\n      confirmation.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          },
          {
            "name": "transfer_request_id",
            "in": "path",
            "description": "Transfer request ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "defb7236-r888-4fe8-b26c-fc462e286907"
          }
        ],
        "requestBody": {
          "description": "Action to be performed on the transfer request.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "Either accept, decline, cancel or confirm the transfer request.",
                    "enum": [
                      "accept",
                      "decline",
                      "cancel",
                      "confirm"
                    ]
                  },
                  "webhooks": {
                    "description": "Can only be provided when creating a transfer request or when updating it with the `accept` action.\n\n* Creating a transfer request:\n  * The requester can get notified when the status of the transfer request changes.\n\n* Updating a transfer request with the `accept` action:\n  * The target of the transfer request can get notified when the transfer completes and can also also register\n  hooks for engagement events that occur after the transfer.\n* When transfer request is accepted, `engagement.transfer_request.accepted` event is fired.\n* When transfer request is confirmed, `engagement.transfer` event is fired.\n\nSee [Webhooks](ref:webhooks) section for more information.\n",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "HTTP Webhook",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "The URL (including protocol) to which the HTTP request will be sent to.\n",
                          "example": "https://example.com"
                        },
                        "method": {
                          "type": "string",
                          "description": "The HTTP method that will be used for the HTTP request.",
                          "example": "POST"
                        },
                        "headers": {
                          "type": "object",
                          "description": "An arbitrary object which will be used to set request headers for the HTTP request. The keys of the object\nwill be used as header names and values as header values. This can be used to authenticate incoming HTTP\nrequests in your server.\n",
                          "example": {
                            "Authorization": "value"
                          }
                        },
                        "events": {
                          "type": "array",
                          "description": "An array of events (at least one) upon which a HTTP request will be made.\n",
                          "items": {
                            "type": "string",
                            "example": "engagement.start"
                          }
                        }
                      },
                      "required": [
                        "url",
                        "method",
                        "events"
                      ]
                    }
                  },
                  "skip_survey": {
                    "type": "boolean",
                    "description": "Only used with the accept action. If set to true, a survey will not be presented to the operator to whom\nthe engagement is transferred."
                  }
                },
                "required": [
                  "action"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "\nTransfer request successfully accepted, declined, cancelled or confirmed.\n",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "Transfer request accepted.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "ID of the transfer request."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Transfer request declined.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "ID of the transfer request."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Transfer request cancelled.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "ID of the transfer request."
                        }
                      }
                    },
                    {
                      "type": "object",
                      "description": "Transfer request confirmed.",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "ID of the transfer request."
                        },
                        "engagement_id": {
                          "type": "string",
                          "description": "ID of the engagement."
                        },
                        "sub_engagement_id": {
                          "type": "string",
                          "description": "ID of the new engagement leg."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "accept": {
                    "summary": "The transfer request was accepted",
                    "value": {
                      "id": "defb7236-r888-4fe8-b26c-fc462e286907"
                    }
                  },
                  "decline": {
                    "summary": "The transfer request was declined",
                    "value": {
                      "id": "defb7236-r888-4fe8-b26c-fc462e286907"
                    }
                  },
                  "cancel": {
                    "summary": "The transfer request was cancelled",
                    "value": {
                      "id": "defb7236-r888-4fe8-b26c-fc462e286907"
                    }
                  },
                  "confirm": {
                    "summary": "The transfer request was confirmed",
                    "value": {
                      "id": "defb7236-r888-4fe8-b26c-fc462e286907",
                      "engagement_id": "abc12121-e888-43ae-99e0-07a676e9a111",
                      "sub_engagement_id": "def34343-c995-43ae-99e0-07a676e9a111"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Your bearer token is valid but you have no access to the requested resource.\n"
          },
          "422": {
            "description": "Invalid input. Check if the request is correct."
          },
          "500": {
            "description": "Internal server error has occurred. Please try again later."
          },
          "503": {
            "description": "The service is temporarily unavailable. Please try again later.\n"
          }
        }
      }
    },
    "/transfer_tickets": {
      "post": {
        "summary": "Transfer to queue",
        "tags": [
          "Transfer"
        ],
        "description": "Transfer an engagement to a queue.\n",
        "requestBody": {
          "description": "Parameters for creating the transfer request.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "engagement_id": {
                    "type": "string",
                    "description": "The ID of the engagement which is transferred.\n",
                    "example": "abc12121-e888-43ae-99e0-07a676e9a111"
                  },
                  "queue_id": {
                    "type": "string",
                    "description": "ID of the queue to which the engagement is transferred.",
                    "example": "ce06d2a0-f9cf-4e4b-91b8-92a0543462a7"
                  },
                  "media": {
                    "type": "string",
                    "description": "The media type with which the engagement continues. The target operator must be available for the specified media.\nVisitor media type is retained or reduced to match the operator media level.\n",
                    "enum": [
                      "text",
                      "phone",
                      "audio",
                      "video"
                    ]
                  },
                  "message": {
                    "type": "string",
                    "description": "A message for the receiving operator. Used to give context about the engagement.\n"
                  },
                  "webhooks": {
                    "description": "Can only be provided when creating a transfer request or when updating it with the `accept` action.\n\n* Creating a transfer request:\n  * The requester can get notified when the status of the transfer request changes.\n\n* Updating a transfer request with the `accept` action:\n  * The target of the transfer request can get notified when the transfer completes and can also also register\n  hooks for engagement events that occur after the transfer.\n* When transfer request is accepted, `engagement.transfer_request.accepted` event is fired.\n* When transfer request is confirmed, `engagement.transfer` event is fired.\n\nSee [Webhooks](ref:webhooks) section for more information.\n",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "HTTP Webhook",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "The URL (including protocol) to which the HTTP request will be sent to.\n",
                          "example": "https://example.com"
                        },
                        "method": {
                          "type": "string",
                          "description": "The HTTP method that will be used for the HTTP request.",
                          "example": "POST"
                        },
                        "headers": {
                          "type": "object",
                          "description": "An arbitrary object which will be used to set request headers for the HTTP request. The keys of the object\nwill be used as header names and values as header values. This can be used to authenticate incoming HTTP\nrequests in your server.\n",
                          "example": {
                            "Authorization": "value"
                          }
                        },
                        "events": {
                          "type": "array",
                          "description": "An array of events (at least one) upon which a HTTP request will be made.\n",
                          "items": {
                            "type": "string",
                            "example": "engagement.start"
                          }
                        }
                      },
                      "required": [
                        "url",
                        "method",
                        "events"
                      ]
                    }
                  }
                },
                "required": [
                  "engagement_id",
                  "queue_id",
                  "media"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The engagement was already transferred to the queue.\n"
          },
          "201": {
            "description": "The engagement was successfully transferred to a queue.\n"
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Your bearer token is valid but you have no access to the requested resource.\n"
          },
          "409": {
            "description": "The engagement was already transferred, but not with the same parameters.\n"
          },
          "422": {
            "description": "Invalid input. Check if the request is correct."
          },
          "500": {
            "description": "Internal server error has occurred. Please try again later."
          },
          "503": {
            "description": "The service is temporarily unavailable. Please try again later.\n"
          }
        }
      }
    },
    "/engagements/{engagement_id}/join_requests": {
      "post": {
        "summary": "Create join request",
        "tags": [
          "Join engagement"
        ],
        "description": "Creates a join request to invite another user to the engagement as a guest.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          }
        ],
        "requestBody": {
          "description": "Parameters for creating the join request.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "guest_id": {
                    "type": "string",
                    "description": "ID of the guest to whom the request is sent.",
                    "example": "b5af3b5a-ead3-41b8-a3ff-31bcbd15314b"
                  },
                  "guest_type": {
                    "type": "string",
                    "description": "Type of the guest.",
                    "enum": [
                      "operator"
                    ],
                    "example": "operator"
                  },
                  "site_id": {
                    "type": "string",
                    "description": "A site ID (in UUID v4 format) associated with the resource.",
                    "example": "4e12729c-96a8-436b-ba63-4d5cfc92abf3"
                  },
                  "message": {
                    "type": "string",
                    "description": "The message that is displayed to the guest upon receiving the join request.\n",
                    "example": "Please join my engagement"
                  },
                  "webhooks": {
                    "description": "See [Webhooks](ref:webhooks) section for more information.\n\n* When join request is accepted, `engagement.join_request.accepted` event is fired.\n* When join request is rejected, canceled or timed out, `engagement.join_request.failure` is fired.\n",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "description": "HTTP Webhook",
                      "properties": {
                        "url": {
                          "type": "string",
                          "description": "The URL (including protocol) to which the HTTP request will be sent to.\n",
                          "example": "https://example.com"
                        },
                        "method": {
                          "type": "string",
                          "description": "The HTTP method that will be used for the HTTP request.",
                          "example": "POST"
                        },
                        "headers": {
                          "type": "object",
                          "description": "An arbitrary object which will be used to set request headers for the HTTP request. The keys of the object\nwill be used as header names and values as header values. This can be used to authenticate incoming HTTP\nrequests in your server.\n",
                          "example": {
                            "Authorization": "value"
                          }
                        },
                        "events": {
                          "type": "array",
                          "description": "An array of events (at least one) upon which a HTTP request will be made.\n",
                          "items": {
                            "type": "string",
                            "example": "engagement.start"
                          }
                        }
                      },
                      "required": [
                        "url",
                        "method",
                        "events"
                      ]
                    }
                  }
                },
                "required": [
                  "guest_id",
                  "guest_type",
                  "site_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Join request ID.",
                      "example": "456741b3-bef6-4dc2-837d-b9b1bc5e0489"
                    },
                    "message": {
                      "type": "string",
                      "description": "The message that is displayed to the guest upon receiving the join request.\n",
                      "example": "Please join my engagement"
                    },
                    "guest_id": {
                      "type": "string",
                      "description": "ID of the guest to whom the request is sent.",
                      "example": "b5af3b5a-ead3-41b8-a3ff-31bcbd15314b"
                    },
                    "guest_type": {
                      "type": "string",
                      "description": "Type of the guest.",
                      "enum": [
                        "operator"
                      ],
                      "example": "operator"
                    },
                    "site_id": {
                      "type": "string",
                      "description": "A site ID (in UUID v4 format) associated with the resource.",
                      "example": "4e12729c-96a8-436b-ba63-4d5cfc92abf3"
                    },
                    "accept_timeout": {
                      "type": "string",
                      "description": "The time (in seconds) that the guest has to answer a join request.\n",
                      "example": 30
                    },
                    "requested_at": {
                      "type": "string",
                      "description": "An ISO-8601 timestamp of when the join request was requested.\n",
                      "example": "2016-06-21T09:12:33.001Z"
                    },
                    "accepted_at": {
                      "example": null,
                      "type": "string",
                      "description": "An ISO-8601 timestamp of when the join request was accepted.\n"
                    },
                    "failed_at": {
                      "type": "string",
                      "description": "An ISO-8601 timestamp of when the join request failed to be accepted for any reason.\n",
                      "example": "2016-06-21T09:12:33.001Z"
                    },
                    "fail_reason": {
                      "type": "string",
                      "description": "Join request failure reason. Only defined when `failed_at` is defined.\n\n- `rejected` - When request was rejected by the receiving participant.\n- `operator_cancel` - When requesting operator canceled the request.\n- `timed_out` - When request was neither accepted, canceled or rejected within `accept_timeout`.\n",
                      "enum": [
                        "rejected",
                        "timed_out",
                        "operator_cancel"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "guest_id",
                    "guest_type",
                    "site_id",
                    "accept_timeout",
                    "requested_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Your bearer token is valid but you have no access to the requested resource.\n"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the requested resource.\n"
          },
          "422": {
            "description": "Invalid input. Check if the request is correct."
          },
          "500": {
            "description": "Internal server error has occurred. Please try again later."
          },
          "503": {
            "description": "The service is temporarily unavailable. Please try again later.\n"
          }
        }
      }
    },
    "/engagements/{engagement_id}/join_requests/{join_request_id}": {
      "get": {
        "summary": "Fetch join request",
        "tags": [
          "Join engagement"
        ],
        "description": "Fetches the join request.\n\nCan be requested by a user who initiated the request to see the state of the join request.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          },
          {
            "name": "join_request_id",
            "in": "path",
            "description": "Join request ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "defb7236-r888-4fe8-b26c-fc462e286907"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Join request ID.",
                      "example": "456741b3-bef6-4dc2-837d-b9b1bc5e0489"
                    },
                    "message": {
                      "type": "string",
                      "description": "The message that is displayed to the guest upon receiving the join request.\n",
                      "example": "Please join my engagement"
                    },
                    "guest_id": {
                      "type": "string",
                      "description": "ID of the guest to whom the request is sent.",
                      "example": "b5af3b5a-ead3-41b8-a3ff-31bcbd15314b"
                    },
                    "guest_type": {
                      "type": "string",
                      "description": "Type of the guest.",
                      "enum": [
                        "operator"
                      ],
                      "example": "operator"
                    },
                    "site_id": {
                      "type": "string",
                      "description": "A site ID (in UUID v4 format) associated with the resource.",
                      "example": "4e12729c-96a8-436b-ba63-4d5cfc92abf3"
                    },
                    "accept_timeout": {
                      "type": "string",
                      "description": "The time (in seconds) that the guest has to answer a join request.\n",
                      "example": 30
                    },
                    "requested_at": {
                      "type": "string",
                      "description": "An ISO-8601 timestamp of when the join request was requested.\n",
                      "example": "2016-06-21T09:12:33.001Z"
                    },
                    "accepted_at": {
                      "example": null,
                      "type": "string",
                      "description": "An ISO-8601 timestamp of when the join request was accepted.\n"
                    },
                    "failed_at": {
                      "type": "string",
                      "description": "An ISO-8601 timestamp of when the join request failed to be accepted for any reason.\n",
                      "example": "2016-06-21T09:12:33.001Z"
                    },
                    "fail_reason": {
                      "type": "string",
                      "description": "Join request failure reason. Only defined when `failed_at` is defined.\n\n- `rejected` - When request was rejected by the receiving participant.\n- `operator_cancel` - When requesting operator canceled the request.\n- `timed_out` - When request was neither accepted, canceled or rejected within `accept_timeout`.\n",
                      "enum": [
                        "rejected",
                        "timed_out",
                        "operator_cancel"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "guest_id",
                    "guest_type",
                    "site_id",
                    "accept_timeout",
                    "requested_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Your bearer token is valid but you have no access to the requested resource.\n"
          },
          "422": {
            "description": "Invalid input. Check if the request is correct."
          },
          "500": {
            "description": "Internal server error has occurred. Please try again later."
          },
          "503": {
            "description": "The service is temporarily unavailable. Please try again later.\n"
          }
        }
      },
      "patch": {
        "summary": "Update join request",
        "tags": [
          "Join engagement"
        ],
        "description": "Updates the join request with the provided action. See the schema below for the list of available actions.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          },
          {
            "name": "join_request_id",
            "in": "path",
            "description": "Join request ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "defb7236-r888-4fe8-b26c-fc462e286907"
          }
        ],
        "requestBody": {
          "description": "Action to be performed on the join request.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "Action to be performed on the join request.\n\n- `accept` - Accepts the join request and adds the operator as a guest to the engagement. This action can be\nperformed only by the guest of the join request.\n- `reject` - Rejects an incoming join request. This action can be performed only by the guest of the join request.\n",
                    "enum": [
                      "accept",
                      "reject"
                    ]
                  }
                },
                "required": [
                  "action"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "properties": {
                    "id": {
                      "type": "string",
                      "description": "Join request ID.",
                      "example": "456741b3-bef6-4dc2-837d-b9b1bc5e0489"
                    },
                    "message": {
                      "type": "string",
                      "description": "The message that is displayed to the guest upon receiving the join request.\n",
                      "example": "Please join my engagement"
                    },
                    "guest_id": {
                      "type": "string",
                      "description": "ID of the guest to whom the request is sent.",
                      "example": "b5af3b5a-ead3-41b8-a3ff-31bcbd15314b"
                    },
                    "guest_type": {
                      "type": "string",
                      "description": "Type of the guest.",
                      "enum": [
                        "operator"
                      ],
                      "example": "operator"
                    },
                    "site_id": {
                      "type": "string",
                      "description": "A site ID (in UUID v4 format) associated with the resource.",
                      "example": "4e12729c-96a8-436b-ba63-4d5cfc92abf3"
                    },
                    "accept_timeout": {
                      "type": "string",
                      "description": "The time (in seconds) that the guest has to answer a join request.\n",
                      "example": 30
                    },
                    "requested_at": {
                      "type": "string",
                      "description": "An ISO-8601 timestamp of when the join request was requested.\n",
                      "example": "2016-06-21T09:12:33.001Z"
                    },
                    "accepted_at": {
                      "example": null,
                      "type": "string",
                      "description": "An ISO-8601 timestamp of when the join request was accepted.\n"
                    },
                    "failed_at": {
                      "type": "string",
                      "description": "An ISO-8601 timestamp of when the join request failed to be accepted for any reason.\n",
                      "example": "2016-06-21T09:12:33.001Z"
                    },
                    "fail_reason": {
                      "type": "string",
                      "description": "Join request failure reason. Only defined when `failed_at` is defined.\n\n- `rejected` - When request was rejected by the receiving participant.\n- `operator_cancel` - When requesting operator canceled the request.\n- `timed_out` - When request was neither accepted, canceled or rejected within `accept_timeout`.\n",
                      "enum": [
                        "rejected",
                        "timed_out",
                        "operator_cancel"
                      ]
                    }
                  },
                  "required": [
                    "id",
                    "guest_id",
                    "guest_type",
                    "site_id",
                    "accept_timeout",
                    "requested_at"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Your bearer token is valid but you have no access to the requested resource.\n"
          },
          "422": {
            "description": "Invalid input. Check if the request is correct."
          },
          "500": {
            "description": "Internal server error has occurred. Please try again later."
          },
          "503": {
            "description": "The service is temporarily unavailable. Please try again later.\n"
          }
        }
      }
    },
    "/engagements/{engagement_id}/participants": {
      "post": {
        "summary": "Join engagement",
        "tags": [
          "Engagement participant"
        ],
        "description": "Join an engagement proactively as a guest.\n\nOnly managers and super managers can join engagements proactively. Furthermore, they can\nonly join engagements whose currently ongoing leg is on any of their assigned sites.\n\nWhen trying to add a participant that is already in the engagement with the\nsame type and guest status, no error occurs and the ongoing engagement\ncontinues with its existing participants. Adding an existing participant\nwith a different type will only succeed when the participant's original type\nis `monitor` and it is attempted to be changed to `operator`, making the\nobserving participant into a guest operator.\n",
        "parameters": [
          {
            "description": "The engagement to be joined",
            "name": "engagement_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          }
        ],
        "requestBody": {
          "description": "Parameters for joining the engagement",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "participant_id",
                  "participant_type"
                ],
                "properties": {
                  "participant_id": {
                    "description": "ID of the user who joins the engagement as a guest or ID of the\nmanager who joins as monitor.\n\nAs users can only join themselves, this should always be set to ID\nof the user that is making the request.\n",
                    "type": "string",
                    "example": "16fe454d-ec84-42fc-a294-4ddbcafc2e4d"
                  },
                  "participant_type": {
                    "type": "string",
                    "enum": [
                      "operator",
                      "monitor"
                    ],
                    "description": "Participant types:\n * `operator` - The user is added to the engagement as a guest\n operator. If the engagement has audio, the user is initially\n muted. The join notification sound is not played when this user\n joins.\n * `monitor` - The user is added to the engagement as a monitor.\n If the engagement has audio, the user is muted and they cannot\n unmute themselves. The other participants receive no indication\n that this user has joined.\n",
                    "example": "operator"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "User has joined the engagement"
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Your bearer token is valid but you have no access to the requested resource.\n"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the requested resource.\n"
          },
          "422": {
            "description": "Invalid input. Check if the request is correct."
          },
          "500": {
            "description": "Internal server error has occurred. Please try again later."
          },
          "503": {
            "description": "The service is temporarily unavailable. Please try again later.\n"
          }
        }
      }
    },
    "/engagements/{engagement_id}/participants/{participant_id}": {
      "patch": {
        "summary": "Update participant",
        "tags": [
          "Engagement participant"
        ],
        "description": "Updates the engagement participant with the provided action.\n\nOnly host participant can update other engagement participants. See the schema below for the list of available\nactions.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          },
          {
            "name": "participant_id",
            "in": "path",
            "description": "Engagement participant ID. Can be either host or guest operator ID or visitor ID.\n",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "c2c9106e-v888-47b2-8db3-089fb49dc9a5"
          }
        ],
        "requestBody": {
          "description": "Action to be performed on the engagement participant.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "Action to be performed on the engagement participant.\n\nAvailable actions:\n\n** `hold` ** - Puts the participant call on hold.\n\n** `resume` ** - Resumes the participant call.\n\n** `remove_audio` ** - Disconnects participant's audio.\n\nThis action can only be performed on primary participants of the engagements - the host operator and visitor. Every participant can remove their own audio. In addition, host operator can modify any of the participants.\n\nHost operator can use this action to downgrade engagement to chat when visitor does not answer the call and the call goes to voicemail.\n\n** `remove_video` ** - Disconnects participant's video.\n\nThe same constraints and access restrictions apply as for `remove_audio`.\n",
                    "enum": [
                      "hold",
                      "resume",
                      "remove_audio",
                      "remove_video"
                    ]
                  }
                },
                "required": [
                  "action"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Your bearer token is valid but you have no access to the requested resource.\n"
          },
          "409": {
            "description": "The request could not be completed due to a conflict with the current state of the requested resource.\n"
          },
          "422": {
            "description": "Invalid input. Check if the request is correct."
          },
          "500": {
            "description": "Internal server error has occurred. Please try again later."
          },
          "503": {
            "description": "The service is temporarily unavailable. Please try again later.\n"
          }
        }
      },
      "delete": {
        "summary": "Remove participant",
        "tags": [
          "Engagement participant"
        ],
        "description": "Removes a participant from the engagement.\n\nThis endpoint can only be used for removing engagement guests. It is not possible to remove the host operator or\nvisitor from the engagement.\n\nThis endpoint can be called by host operator or the participant who will be removed from the engagement.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          },
          {
            "description": "ID of the participant to be removed.",
            "name": "participant_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "c2c9106e-v888-47b2-8db3-089fb49dc9a5"
          }
        ],
        "responses": {
          "204": {
            "description": "Participant has been removed from the engagement."
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Your bearer token is valid but you have no access to the requested resource.\n"
          },
          "422": {
            "description": "Invalid input. Check if the request is correct."
          },
          "500": {
            "description": "Internal server error has occurred. Please try again later."
          },
          "503": {
            "description": "The service is temporarily unavailable. Please try again later.\n"
          }
        }
      }
    },
    "/engagements/{engagement_id}/chat_messages/{message_id}": {
      "put": {
        "summary": "Send chat message",
        "tags": [
          "Chat"
        ],
        "description": "Sends a chat message to an engagement participant. This endpoint can be used by either the operator or the\nvisitor. The endpoint infers the sender from the authorization headers.\n\n* If `Authorization` header has the **operator's** bearer token in it, the message is always sent to the visitor.\n* If `Authorization` header has the **visitor's** bearer token in it, the message is always sent to the operator.\n\nThis endpoint requires a client-generated message ID as a version 4 UUID in the URL.\n\nSee [Webhooks](ref:webhooks) for receiving chat messages via webhook events.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          },
          {
            "name": "message_id",
            "in": "path",
            "description": "Client-generated message ID as a UUID version 4.\n\nSubmitting the chat message twice with the same ID does not create a duplicate message.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "The content the sender wishes to send to the recipient. This can only be empty if the message contains a file\nattachment.\n"
                  },
                  "type": {
                    "type": "string",
                    "description": "Chat message type. Type is only used when the target is `operator`.\n\n* `chat` - A regular chat message.\n* `event` - A message type used to communicate that an action has been performed by the visitor. Events can\nonly be sent by visitors.\n    - See [`POST /engagements/{engagement_id}/events`](ref:event#post_engagements-engagement_id-events).\n* `suggestion` - A suggested response to the visitor. Suggestion is visible only to operator and can then be\nselected and sent to the visitor. Also see [AI suggestion](doc:suggestion).\n* `prompt` - A message that is only visible to operator. Prompts are typically used to guide the operator\nthrough an engagement. For example, a prompt might suggest offering CoBrowsing to the visitor.\nAlso see [AI prompt](doc:prompt).\n",
                    "enum": [
                      "chat",
                      "event",
                      "suggestion",
                      "prompt"
                    ],
                    "default": "chat"
                  },
                  "attachment": {
                    "type": "object",
                    "description": "Attachments let you add more context to a message, enhancing user experience and making it more interactive.\nChat message attachment must have type property that defines the behavior of attachment.\n\nExample response to a chat message with an attachment when attachment's option is selected:\n```\n{\n  \"message\": \"Choice 2\",\n  \"created_at\": \"2017-09-21T12:44:01.000Z\",\n  \"type\": \"user\",\n  \"sender\": {\n    \"href\": \"https://api.salemove.com/visitors/c2c9106e-v888-47b2-8db3-089fb49dc9a5\",\n    \"name\": \"John Smith\",\n    \"type\": \"visitor\"\n  },\n  \"attachment\": {\n    \"type\": \"single_choice_response\",\n    \"selected_option\": \"choice_2\"\n  }\n```\n",
                    "oneOf": [
                      {
                        "title": "Single choice",
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Type of an attachment.\n\nTo present the user with the list of options to make a simplified decision for the next interaction, type must\nbe `single_choice`. Selected option will be sent back to the other party as a regular chat message containing\nsingle choice response attachment.\n",
                            "enum": [
                              "single_choice"
                            ]
                          },
                          "options": {
                            "type": "array",
                            "description": "A list of all available choices for the user to choose from.\n",
                            "items": {
                              "type": "object",
                              "properties": {
                                "text": {
                                  "type": "string",
                                  "description": "Text displayed to user as a choice label.",
                                  "example": "I'm interested in insurance policies."
                                },
                                "value": {
                                  "type": "string",
                                  "description": "Value of the choice sent as a response on user interaction.",
                                  "example": "insurance"
                                }
                              },
                              "required": [
                                "text",
                                "value"
                              ]
                            }
                          },
                          "image_url": {
                            "type": "string",
                            "description": "URL of an image displayed on top of the choices expressing clear intent of the cards.\n",
                            "example": "https://example.com/files/image.png"
                          }
                        },
                        "required": [
                          "type",
                          "options"
                        ]
                      },
                      {
                        "title": "Single choice response",
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Type of an attachment.\n\nTo indicates a successful user interaction while passing back also the selection value, type must be\n`single_choice_response`.\n",
                            "enum": [
                              "single_choice_response"
                            ]
                          },
                          "selected_option": {
                            "type": "string",
                            "description": "Selected choice, based on the user interaction.\n"
                          }
                        },
                        "required": [
                          "type",
                          "selected_option"
                        ]
                      },
                      {
                        "title": "Files",
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Type of an attachment.\n\nIf the attachment contains files, the type is `files`.\n",
                            "enum": [
                              "files"
                            ]
                          },
                          "files": {
                            "type": "array",
                            "description": "List of files in the message.\n",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "The file's ID."
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the uploaded file."
                                },
                                "content_type": {
                                  "type": "string",
                                  "description": "MIME type of the file."
                                },
                                "url": {
                                  "type": "string",
                                  "description": "URL from which the file can be downloaded. If null, then the file cannot be downloaded."
                                },
                                "size": {
                                  "type": "integer",
                                  "description": "Size of the uploaded file in bytes."
                                },
                                "deleted": {
                                  "type": "boolean",
                                  "description": "Whether the file has been deleted. If true, then the file cannot be downloaded."
                                }
                              },
                              "required": [
                                "id",
                                "name",
                                "content_type",
                                "size",
                                "deleted"
                              ]
                            }
                          }
                        },
                        "required": [
                          "type",
                          "files"
                        ]
                      }
                    ]
                  },
                  "metadata": {
                    "type": "object",
                    "description": "Chat message metadata allows an integrator to add end to end data inside a JSON object. This information is\nonly relevant to the integrator and will be handled transparently inside Glia.\n\n* When sender is operator assistant (sender type `omniguide`), the message's metadata contains:\n```\nprovider: {name: provider_name}\n```\n* One of the common metadata use cases is sending a custom response card, see a JSON payload example for it\nin [Suggestions with Custom Response Card](doc:suggestion#response-cards).\n"
                  }
                }
              },
              "example": {
                "content": "Hi, how may I help you?",
                "type": "chat",
                "attachment": null,
                "metadata": null
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/engagements/{engagement_id}/custom_commands/{command_id}": {
      "put": {
        "summary": "Send custom command",
        "tags": [
          "Chat"
        ],
        "description": "Send custom commands that the engagement visitor web client can interpret and execute.\n\nThis endpoint can be used only by the operator.\n\nThis endpoint requires a client-generated custom command ID in the URL.\n\n* Custom command ID must be a Version 4 UUID.\n* Submitting a custom command twice with the same ID does not execute duplicate commands.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          },
          {
            "name": "command_id",
            "in": "path",
            "description": "Client-generated custom command ID must be a version 4 UUID.\n\nSubmitting a custom command twice with the same ID does not execute duplicate commands.\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "content": {
                    "type": "string",
                    "description": "Optional textual content that will be shown later in the chat transcript. If content is not provided,\ngeneric message is used.\n"
                  },
                  "properties": {
                    "type": "object",
                    "description": "Custom command properties can be freely defined by the user. Must be a JSON object.\n"
                  }
                },
                "required": [
                  "properties"
                ]
              },
              "example": {
                "content": "Custom command triggered",
                "properties": {
                  "key": "value"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK\n\nCustom command executed."
          }
        }
      }
    },
    "/engagements/{engagement_id}/files": {
      "post": {
        "summary": "Upload file",
        "tags": [
          "Chat"
        ],
        "description": "Uploads a file that can later be sent as a part of a chat message.\n\nThe response contains a field `security_scanning_required`.  If the value of this field is `true`, uploader must\nwait for the `FileSecurityScanResultEvent` to arrive before they can send the file as a part of a chat message.\nAdditionally, the scan result must be clean in order to send the file.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          }
        ],
        "requestBody": {
          "description": "File to be uploaded.\n\nMaximum file size is 25 MB by default and 5 MB for SMS/WhatsApp visitors. Only files with MIME types set in\nsite settings can be uploaded. For more, see [`allowed_file_content_types` setting](ref:sites#put_sites-site-id).\n",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "example": {
                "summary": "multipart/form-data",
                "value": {
                  "content": "@image.png"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "example": {
                "summary": "multipart/form-data",
                "value": {
                  "content": "@file.pdf"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK\n\nFile is uploaded and security scanning completed.\n\nFor example:\n```\n{\n  \"file_id\": \"53b236ee-f888-45ec-8e0f-5bf4d5e16a2e\",\n  \"security_scanning_required\": true\n  }\n```\n"
          }
        }
      }
    },
    "/engagements/{engagement_id}/files/{file_id}": {
      "get": {
        "summary": "Fetch file",
        "tags": [
          "Chat"
        ],
        "description": "Downloads a file that is part of an engagement (for example, the file has been sent as part of a chat message).\nReturns either the contents of the file or a download URL depending on the `Accept` header.\n\n`Accept` header:\n\n* `application/vnd.salemove.v1+json` - returns a JSON response containing `file_url` , which is a temporary file\ndownload URL that expires after a short while.\n* `*/*` - (default) returns the contents of the requested file.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          },
          {
            "in": "path",
            "name": "file_id",
            "description": "ID of the file to be downloaded.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "type": "string",
                  "format": "URL"
                }
              },
              "*/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          }
        }
      }
    },
    "/engagements/{engagement_id}/typing_indicator": {
      "put": {
        "summary": "Update typing indicator",
        "tags": [
          "Chat"
        ],
        "description": "Updates engagement participant typing indicator.\n\nTyping indicator allows engagement participant to know whether another participant is currently typing or not.\nThis brings a more fluid user experience for participants while they are exchanging chat messages.\n\nThis endpoint can be used by either the operator or the visitor. The endpoint infers the sender from the\nauthorization headers.\n\n* Sending concurrent requests might lead to requests being delivered to our API out of order. Use techniques such\nas throttling and debouncing to avoid this.\n* Avoid changing typing indicator too often as it distracts engagement participants. For example, instead of\nchanging typing indicator to `false` every time participant stops typing, use some heuristics, such as:\n    - participant has not typed for 3 seconds;\n    - participant deleted the whole message from the chat input box.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "typing": {
                    "type": "boolean",
                    "description": "Whether the engagement's participant is typing or not.\n",
                    "enum": [
                      true,
                      false
                    ]
                  }
                },
                "required": [
                  "typing"
                ]
              },
              "example": {
                "typing": true
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OK"
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Sorry, you are not part of this engagement."
          },
          "422": {
            "description": "Invalid input. Check if the request is correct."
          }
        }
      }
    },
    "/engagements/{engagement_id}/chat_transcript": {
      "get": {
        "summary": "Fetch chat transcript",
        "tags": [
          "Chat"
        ],
        "description": "Fetches the engagement's chat transcript.\n\n* The users with role `manager` can see the transcript of all engagement legs\n  if engagement took place on their site.\n* The users with role `operator` can see the transcripts of engagement legs\n  in which they participated and of the engagement legs preceding these legs.\n* The visitors can see the transcripts of all engagement legs.\n\nFiles attachments in chat transcript:\n\n* When a message contains a `files` type attachment, the attachment includes file name, content type and URL. The\nURL requires the same authorization as fetching chat transcript.\n* For example:\n\n```\n{\n  \"type\": \"files\",\n  \"files\": [\n    {\n      \"id\": \"53b236ee-f888-45ec-8e0f-5bf4d5e16a2e\",\n      \"url\": \"https://api.salemove.com/engagements/abc12121-e888-43ae-99e0-07a676e9a111/files/53b236ee-f888-45ec-8e0f-5bf4d5e16a2e\",\n      \"name\": \"original_file_name.png\",\n      \"content_type\": \"image/png\",\n      \"size\": 85468,\n      \"deleted\": false\n    }\n  ]\n}\n```\n\n* In case the contents of the file have been deleted, the url will be `null` and deleted will be `true`.\n* For example:\n\n```\n{\n  \"type\": \"files\",\n  \"files\": [\n    {\n      \"id\": \"20d35c60-7e73-4d83-8096-72cbbcaf89d8\",\n      \"url\": null,\n      \"name\": \"original_file_name.png\",\n      \"content_type\": \"image/png\",\n      \"size\": 124500\n      \"deleted\": true\n    }\n  ]\n}\n```\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          }
        ],
        "responses": {
          "200": {
            "description": "OK\n\nTranscript for engagement `engagement_id` successfully retrieved.\n",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "type": "array",
                  "description": "List of messages sent in the engagement.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string",
                        "description": "Text message that the engagement participant sent.",
                        "example": "Hi, how may I help you?"
                      },
                      "created_at": {
                        "type": "string",
                        "description": "ISO 8601 timestamp if when the message was sent.",
                        "example": "2020-05-31T09:46:28Z"
                      },
                      "type": {
                        "type": "string",
                        "description": "Chat message type as shown in the chat transcript.\n\n* `user` - A regular chat message between the engagement's participants or a system message (e.g. two-way audio\nhas started).\n* `event` - A message that was stored to indicate an event.\n    - See [`POST /engagements/{engagement_id}/events`](ref:event#post_engagements-engagement_id-events).\n* `suggestion` - A suggested response to the visitor. Suggestion is visible only to operator and can then be\nselected and sent to the visitor. Also see [AI suggestion](doc:suggestion).\n* `prompt` - A message that is only visible to operator. Prompts are typically used to guide the operator\nthrough an engagement. For example, a prompt might suggest offering CoBrowsing to the visitor.\nAlso see [AI prompt](doc:prompt).\n",
                        "enum": [
                          "user",
                          "event",
                          "suggestion",
                          "prompt"
                        ]
                      },
                      "attachment": {
                        "type": "object",
                        "description": "Attachments let you add more context to a message, enhancing user experience and making it more interactive.\nChat message attachment must have type property that defines the behavior of attachment.\n\nExample response to a chat message with an attachment when attachment's option is selected:\n```\n{\n  \"message\": \"Choice 2\",\n  \"created_at\": \"2017-09-21T12:44:01.000Z\",\n  \"type\": \"user\",\n  \"sender\": {\n    \"href\": \"https://api.salemove.com/visitors/c2c9106e-v888-47b2-8db3-089fb49dc9a5\",\n    \"name\": \"John Smith\",\n    \"type\": \"visitor\"\n  },\n  \"attachment\": {\n    \"type\": \"single_choice_response\",\n    \"selected_option\": \"choice_2\"\n  }\n```\n",
                        "oneOf": [
                          {
                            "title": "Single choice",
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "Type of an attachment.\n\nTo present the user with the list of options to make a simplified decision for the next interaction, type must\nbe `single_choice`. Selected option will be sent back to the other party as a regular chat message containing\nsingle choice response attachment.\n",
                                "enum": [
                                  "single_choice"
                                ]
                              },
                              "options": {
                                "type": "array",
                                "description": "A list of all available choices for the user to choose from.\n",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "text": {
                                      "type": "string",
                                      "description": "Text displayed to user as a choice label.",
                                      "example": "I'm interested in insurance policies."
                                    },
                                    "value": {
                                      "type": "string",
                                      "description": "Value of the choice sent as a response on user interaction.",
                                      "example": "insurance"
                                    }
                                  },
                                  "required": [
                                    "text",
                                    "value"
                                  ]
                                }
                              },
                              "image_url": {
                                "type": "string",
                                "description": "URL of an image displayed on top of the choices expressing clear intent of the cards.\n",
                                "example": "https://example.com/files/image.png"
                              }
                            },
                            "required": [
                              "type",
                              "options"
                            ]
                          },
                          {
                            "title": "Single choice response",
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "Type of an attachment.\n\nTo indicates a successful user interaction while passing back also the selection value, type must be\n`single_choice_response`.\n",
                                "enum": [
                                  "single_choice_response"
                                ]
                              },
                              "selected_option": {
                                "type": "string",
                                "description": "Selected choice, based on the user interaction.\n"
                              }
                            },
                            "required": [
                              "type",
                              "selected_option"
                            ]
                          },
                          {
                            "title": "Files",
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "Type of an attachment.\n\nIf the attachment contains files, the type is `files`.\n",
                                "enum": [
                                  "files"
                                ]
                              },
                              "files": {
                                "type": "array",
                                "description": "List of files in the message.\n",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "type": "string",
                                      "description": "The file's ID."
                                    },
                                    "name": {
                                      "type": "string",
                                      "description": "Name of the uploaded file."
                                    },
                                    "content_type": {
                                      "type": "string",
                                      "description": "MIME type of the file."
                                    },
                                    "url": {
                                      "type": "string",
                                      "description": "URL from which the file can be downloaded. If null, then the file cannot be downloaded."
                                    },
                                    "size": {
                                      "type": "integer",
                                      "description": "Size of the uploaded file in bytes."
                                    },
                                    "deleted": {
                                      "type": "boolean",
                                      "description": "Whether the file has been deleted. If true, then the file cannot be downloaded."
                                    }
                                  },
                                  "required": [
                                    "id",
                                    "name",
                                    "content_type",
                                    "size",
                                    "deleted"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "type",
                              "files"
                            ]
                          }
                        ]
                      },
                      "metadata": {
                        "type": "object",
                        "description": "Chat message metadata allows an integrator to add end to end data inside a JSON object. This information is\nonly relevant to the integrator and will be handled transparently inside Glia.\n\n* When sender is operator assistant (sender type `omniguide`), the message's metadata contains:\n```\nprovider: {name: provider_name}\n```\n* One of the common metadata use cases is sending a custom response card, see a JSON payload example for it\nin [Suggestions with Custom Response Card](doc:suggestion#response-cards).\n"
                      },
                      "sender": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Chat message sender type.\n\n* `operator` - sender is either human operator or a virtual assistant.\n* `visitor` - sender is a visitor.\n* `omniguide`- sender is an operator assistant, e.g. sending prompts or suggestions to the operator.\n* `system` - sender is Glia system, e.g. in case there is a notification regarding media upgrade or CoBrowsing.\n",
                            "enum": [
                              "operator",
                              "visitor",
                              "omniguide",
                              "system"
                            ],
                            "example": "operator"
                          },
                          "name": {
                            "type": "string",
                            "description": "The sender's name.\n\n* If sender type is either `visitor` or `operator` this is an actual human name, or an AI bot name, in case of\nvirtual assistant.\n* If sender type is `omniguide`, name is also `omniguide`.\n* If sender type is `system`, name is also `system`.\n",
                            "example": "Elsie Blake"
                          },
                          "href": {
                            "type": "string",
                            "description": "The URL for sender's information if the sender is a visitor or a human operator.\n",
                            "example": "https://api.salemove.com/operators/ec317122-o888-4b43-996d-34a2ed3b76d8"
                          }
                        },
                        "required": [
                          "type",
                          "name"
                        ]
                      }
                    },
                    "required": [
                      "message",
                      "created_at",
                      "type",
                      "sender"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/engagements/{engagement_id}/media_upgrade_requests": {
      "post": {
        "summary": "Create upgrade request",
        "tags": [
          "Media upgrade"
        ],
        "description": "Creates a media upgrade request to an engagement participant.\n\nThe endpoint can be used by either the operator or the visitor. The endpoint infers the sender from the\nauthorization headers.\n\n* When operator makes the request, the `audio_type`, `phone_number`, and `phone_extension` are retrieved from\ntheir settings.\n    - This data is not shared with the visitor.\n* When engagement participant creates a new request before the previous request was accepted/declined then the\nprevious request is canceled.\n* See [Webhooks](ref:webhooks) for receiving media upgrade requests via webhook events.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "audio": {
                    "type": "string",
                    "nullable": true,
                    "description": "* `two_way` - audio is to be used.\n* `null` - audio is not to be used.\n",
                    "enum": [
                      "two_way",
                      null
                    ]
                  },
                  "video": {
                    "type": "string",
                    "nullable": true,
                    "description": "* `two_way` - visitor and operator share their video with each other.\n* `one_way` - operator shares their video with the visitor.\n* `null` - video is not to be used.\n",
                    "enum": [
                      "two_way",
                      "one_way",
                      null
                    ]
                  },
                  "audio_type": {
                    "type": "string",
                    "enum": [
                      "browser",
                      "phone"
                    ],
                    "description": "Specifies the type of audio to be used for the user making the request.\n\nThis property is required when visitor creates a media upgrade request.\n\nThis property is ignored when operator creates a media upgrade request. The operator's audio type can be configured in their Glia Hub account settings.\n\nAvailable audio types:\n\n* `browser` - user will use browser audio.\n\n* `phone` - user will use phone audio.\n"
                  },
                  "phone_number": {
                    "type": "string",
                    "description": "Phone number of the user. The supported format is [E.164](doc:glossary#phone-number).\n\nMust be set if and only if `audio_type` is `phone`.\n"
                  },
                  "phone_extension": {
                    "type": "string",
                    "description": "The phone number extension of the user.\n\nA valid extension contains 1-7 digits and any number of `,` characters.\n\nThere is an initial two second delay time before the first extension character is processed. Each `,` character in the extension adds a two second wait time before the next character is processed. Maximum length is 25 characters.\n\nCan only be set if `audio_type` is `phone`.\n"
                  }
                },
                "required": [
                  "audio",
                  "video"
                ]
              },
              "example": {
                "audio": "two_way",
                "video": "two_way",
                "audio_type": "browser",
                "phone_number": null,
                "phone_extension": null
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK\n\nMedia upgrade request successfully sent.\n"
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Sorry, you are not part of this engagement."
          },
          "422": {
            "description": "Invalid input. Check if the request is correct."
          },
          "500": {
            "description": "Internal error has appeared. Please try again a little bit later."
          },
          "503": {
            "description": "The service is temporarily unavailable. Please try again a little bit  later.\n"
          }
        }
      }
    },
    "/engagements/{engagement_id}/media_upgrade_requests/{media_upgrade_request_id}": {
      "patch": {
        "summary": "Answer upgrade request",
        "tags": [
          "Media upgrade"
        ],
        "description": "Accepts or declines a pending media upgrade request.\n\nThis endpoint can be used by either the operator or the visitor. The endpoint infers the sender from the\nauthorization headers.\n\n* When operator accepts the request, the `audio_type`, `phone_number`, and  `phone_extension` are retrieved from\ntheir settings.\n    - This data is not shared with the visitor.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          },
          {
            "name": "media_upgrade_request_id",
            "in": "path",
            "description": "ID of the media upgrade request that you will accept or decline.\n",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "66857eb9-m888-4fe5-b73e-a8ca8c4ea2ae"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "Either accept or decline the media upgrade request.\n",
                    "enum": [
                      "accept",
                      "decline"
                    ]
                  },
                  "audio_type": {
                    "type": "string",
                    "enum": [
                      "browser",
                      "phone"
                    ],
                    "description": "Specifies the type of audio to be used for user answering the request.\n\nThis property is required when visitor accepts a media upgrade request.\n\nThis property is ignored when operator answers a media upgrade request. The operator's audio type can be configured in their Glia Hub account settings.\n\nAvailable audio types:\n\n* `browser` - user will use browser audio.\n\n* `phone` - user will use phone audio.\n"
                  },
                  "phone_number": {
                    "type": "string",
                    "description": "Phone number of the user. The supported format is [E.164](doc:glossary#phone-number).\n\nMust be set if and only if `audio_type` is `phone`.\n"
                  },
                  "phone_extension": {
                    "type": "string",
                    "description": "The phone number extension of the user.\n\nA valid extension contains 1-7 digits and any number of `,` characters.\n\nThere is an initial two second delay time before the first extension character is processed. Each `,` character in the extension adds a two second wait time before the next character is processed. Maximum length is 25 characters.\n\nCan only be set if `audio_type` is `phone`.\n"
                  }
                },
                "required": [
                  "action"
                ]
              },
              "example": {
                "action": "accept"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK\n\nMedia upgrade either accepted or declined.\n"
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "Sorry, you are not part of this engagement."
          },
          "422": {
            "description": "Invalid input. Check if the request is correct."
          },
          "500": {
            "description": "Internal error has appeared. Please try again a little bit later."
          },
          "503": {
            "description": "The service is temporarily unavailable. Please try again a little bit  later.\n"
          }
        }
      }
    },
    "/engagements/{engagement_id}/events": {
      "post": {
        "summary": "Create event",
        "tags": [
          "Events"
        ],
        "description": "\nAllows integrators to send event messages which communicate that an action has been performed by the visitor. See\nalso [Visitor JS API](https://sdk-docs.glia.com/visitor-js-api/current/Engagement.html#recordEvent).\n\n* Note that this endpoint uses **visitor's** bearer token for authorization.\n",
        "parameters": [
          {
            "name": "engagement_id",
            "in": "path",
            "description": "Engagement ID.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc12121-e888-43ae-99e0-07a676e9a111"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "message": {
                    "type": "string",
                    "description": "Utterance depicting the engaged visitor's event.\n"
                  }
                },
                "required": [
                  "message"
                ]
              },
              "example": {
                "message": "Visitor navigated to insurance page"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK\n\nA successful request returns a newly-created event message object as a response.\n"
          },
          "401": {
            "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
          },
          "403": {
            "description": "You are not a `visitor` in the ongoing engagement.\n"
          }
        }
      }
    },
    "/engagements/queue/wait_duration": {
      "get": {
        "summary": "Fetch queue wait time",
        "tags": [
          "Queue wait time"
        ],
        "description": "Fetches the average duration that other visitors on the same site have had to wait in the queue. The endpoint is\nused by the Visitor App to give an estimate of the waiting time for the current visitor who has entered the queue.\n\nThe average value is calculated from all wait times observed between now and some time in the past, where how far\nback it goes is configurable per site.\n",
        "responses": {
          "200": {
            "description": "OK\nReturns the average queue wait time for the site.",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "properties": {
                    "average_duration_in_seconds": {
                      "type": "integer",
                      "description": "The average duration that the visitors have been waiting in the queue before engagement on this site.\n"
                    }
                  },
                  "required": [
                    "average_duration_in_seconds"
                  ],
                  "example": {
                    "average_duration_in_seconds": 122
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "responses": {
      "401NotAuthorized": {
        "description": "Your bearer token has expired or you are not authorized to perform this request.\n"
      },
      "403NotPartOfEngagement": {
        "description": "Sorry, you are not part of this engagement."
      },
      "422InvalidInput": {
        "description": "Invalid input. Check if the request is correct."
      },
      "500InternalError": {
        "description": "Internal error has appeared. Please try again a little bit later."
      },
      "503ServiceUnavailable": {
        "description": "The service is temporarily unavailable. Please try again a little bit  later.\n"
      }
    }
  }
}
