{
  "openapi": "3.0.0",
  "info": {
    "title": "Statistics",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://api.salemove.com",
      "description": "Glia REST API base URL"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/engagements/stats/count": {
      "post": {
        "summary": "Engagement request count",
        "tags": [
          "Counts"
        ],
        "description": "Returns engagement request count for the queried time period.\n\nThe user performing this request must have at least manager role on the site.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "query_type": {
                        "type": "string",
                        "description": "This String should always be timeseries.",
                        "example": "timeseries"
                      },
                      "granularity": {
                        "type": "string",
                        "description": "Defines the granularity to bucket query results. See [Granularities](doc:granularities).",
                        "example": "all"
                      },
                      "start_date": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp. Defines the query start date (inclusive).",
                        "example": "2017-02-20T00:00:00Z"
                      },
                      "end_date": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp. Defines the query end date (exclusive).",
                        "example": "2017-02-24T00:00:00Z"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "filter": {
                        "oneOf": [
                          {
                            "allOf": [
                              {
                                "title": "Selector filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "selector",
                                    "description": "This should always be \"selector\".",
                                    "enum": [
                                      "selector"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "example": "$dimension",
                                    "description": "The dimension to filter on."
                                  },
                                  "value": {
                                    "type": "string",
                                    "example": "$value"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "operator_id",
                                      "queue_id",
                                      "type",
                                      "source",
                                      "outcome",
                                      "offered_media",
                                      "accepted_media"
                                    ],
                                    "description": "Possible filters:\n  * `site_id` - See engagement requests for a specific site.\n  * `operator_id` - See engagement requests for a specific operator.\n  * `queue_id` - See engagement requests for a specific queue.\n  * `type` - Type of engagement request. Possible values are `proactive`, `reactive`, `transfer`.\n  * `source` - reactive engagement request starting source (`button_embed`, `callout`, `hotlink`,\n`external_button`, `tab`). See [engagement sources](ref:engagement#get_engagements-engagement-id-1).\n  * `outcome` - Engagement request outcome (`accepted`, `rejected`, `timed_out`, `visitor_left`, `visitor_cancel`,\n`operator_cancel`, `operator_left`, `error`, `delivered`).\n  * `offered_media` - See engagement requests where video, audio, phone, or chat was offered.\n  * `accepted_media` - See engagement requests where video, audio, phone, or chat was used.\n"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "In filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "in",
                                    "description": "This should always be \"in\".",
                                    "enum": [
                                      "in"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "example": "$dimension",
                                    "description": "The dimension to filter on."
                                  },
                                  "values": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "example_dimension_value"
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "operator_id",
                                      "queue_id",
                                      "type",
                                      "source",
                                      "outcome",
                                      "offered_media",
                                      "accepted_media"
                                    ],
                                    "description": "Possible filters:\n  * `site_id` - See engagement requests for a specific site.\n  * `operator_id` - See engagement requests for a specific operator.\n  * `queue_id` - See engagement requests for a specific queue.\n  * `type` - Type of engagement request. Possible values are `proactive`, `reactive`, `transfer`.\n  * `source` - reactive engagement request starting source (`button_embed`, `callout`, `hotlink`,\n`external_button`, `tab`). See [engagement sources](ref:engagement#get_engagements-engagement-id-1).\n  * `outcome` - Engagement request outcome (`accepted`, `rejected`, `timed_out`, `visitor_left`, `visitor_cancel`,\n`operator_cancel`, `operator_left`, `error`, `delivered`).\n  * `offered_media` - See engagement requests where video, audio, phone, or chat was offered.\n  * `accepted_media` - See engagement requests where video, audio, phone, or chat was used.\n"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "Bound filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "This should always be \"bound\".",
                                    "enum": [
                                      "bound"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "description": "The dimension to filter on."
                                  },
                                  "ordering": {
                                    "type": "string",
                                    "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                    "enum": [
                                      "lexicographic",
                                      "alphanumeric",
                                      "numeric",
                                      "strlen"
                                    ]
                                  },
                                  "lower": {
                                    "type": "string",
                                    "description": "The lower bound for the filter."
                                  },
                                  "upper": {
                                    "type": "string",
                                    "description": "The upper bound for the filter."
                                  },
                                  "lowerStrict": {
                                    "type": "boolean",
                                    "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                  },
                                  "upperStrict": {
                                    "type": "boolean",
                                    "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                  }
                                },
                                "required": [
                                  "type",
                                  "dimension"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "operator_id",
                                      "queue_id",
                                      "type",
                                      "source",
                                      "outcome",
                                      "offered_media",
                                      "accepted_media"
                                    ],
                                    "description": "Possible filters:\n  * `site_id` - See engagement requests for a specific site.\n  * `operator_id` - See engagement requests for a specific operator.\n  * `queue_id` - See engagement requests for a specific queue.\n  * `type` - Type of engagement request. Possible values are `proactive`, `reactive`, `transfer`.\n  * `source` - reactive engagement request starting source (`button_embed`, `callout`, `hotlink`,\n`external_button`, `tab`). See [engagement sources](ref:engagement#get_engagements-engagement-id-1).\n  * `outcome` - Engagement request outcome (`accepted`, `rejected`, `timed_out`, `visitor_left`, `visitor_cancel`,\n`operator_cancel`, `operator_left`, `error`, `delivered`).\n  * `offered_media` - See engagement requests where video, audio, phone, or chat was offered.\n  * `accepted_media` - See engagement requests where video, audio, phone, or chat was used.\n"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "Logical expression filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Should be one of \"and\", \"or\" or \"not\".",
                                    "enum": [
                                      "and",
                                      "or",
                                      "not"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "fields": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "allOf": [
                                            {
                                              "title": "Selector filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "example": "selector",
                                                  "description": "This should always be \"selector\".",
                                                  "enum": [
                                                    "selector"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "example": "$dimension",
                                                  "description": "The dimension to filter on."
                                                },
                                                "value": {
                                                  "type": "string",
                                                  "example": "$value"
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "operator_id",
                                                    "queue_id",
                                                    "type",
                                                    "source",
                                                    "outcome",
                                                    "offered_media",
                                                    "accepted_media"
                                                  ],
                                                  "description": "Possible filters:\n  * `site_id` - See engagement requests for a specific site.\n  * `operator_id` - See engagement requests for a specific operator.\n  * `queue_id` - See engagement requests for a specific queue.\n  * `type` - Type of engagement request. Possible values are `proactive`, `reactive`, `transfer`.\n  * `source` - reactive engagement request starting source (`button_embed`, `callout`, `hotlink`,\n`external_button`, `tab`). See [engagement sources](ref:engagement#get_engagements-engagement-id-1).\n  * `outcome` - Engagement request outcome (`accepted`, `rejected`, `timed_out`, `visitor_left`, `visitor_cancel`,\n`operator_cancel`, `operator_left`, `error`, `delivered`).\n  * `offered_media` - See engagement requests where video, audio, phone, or chat was offered.\n  * `accepted_media` - See engagement requests where video, audio, phone, or chat was used.\n"
                                                },
                                                "value": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "title": "In filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "example": "in",
                                                  "description": "This should always be \"in\".",
                                                  "enum": [
                                                    "in"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "example": "$dimension",
                                                  "description": "The dimension to filter on."
                                                },
                                                "values": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string",
                                                    "example": "example_dimension_value"
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "operator_id",
                                                    "queue_id",
                                                    "type",
                                                    "source",
                                                    "outcome",
                                                    "offered_media",
                                                    "accepted_media"
                                                  ],
                                                  "description": "Possible filters:\n  * `site_id` - See engagement requests for a specific site.\n  * `operator_id` - See engagement requests for a specific operator.\n  * `queue_id` - See engagement requests for a specific queue.\n  * `type` - Type of engagement request. Possible values are `proactive`, `reactive`, `transfer`.\n  * `source` - reactive engagement request starting source (`button_embed`, `callout`, `hotlink`,\n`external_button`, `tab`). See [engagement sources](ref:engagement#get_engagements-engagement-id-1).\n  * `outcome` - Engagement request outcome (`accepted`, `rejected`, `timed_out`, `visitor_left`, `visitor_cancel`,\n`operator_cancel`, `operator_left`, `error`, `delivered`).\n  * `offered_media` - See engagement requests where video, audio, phone, or chat was offered.\n  * `accepted_media` - See engagement requests where video, audio, phone, or chat was used.\n"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "title": "Bound filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "description": "This should always be \"bound\".",
                                                  "enum": [
                                                    "bound"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "description": "The dimension to filter on."
                                                },
                                                "ordering": {
                                                  "type": "string",
                                                  "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                                  "enum": [
                                                    "lexicographic",
                                                    "alphanumeric",
                                                    "numeric",
                                                    "strlen"
                                                  ]
                                                },
                                                "lower": {
                                                  "type": "string",
                                                  "description": "The lower bound for the filter."
                                                },
                                                "upper": {
                                                  "type": "string",
                                                  "description": "The upper bound for the filter."
                                                },
                                                "lowerStrict": {
                                                  "type": "boolean",
                                                  "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                                },
                                                "upperStrict": {
                                                  "type": "boolean",
                                                  "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "dimension"
                                              ]
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "operator_id",
                                                    "queue_id",
                                                    "type",
                                                    "source",
                                                    "outcome",
                                                    "offered_media",
                                                    "accepted_media"
                                                  ],
                                                  "description": "Possible filters:\n  * `site_id` - See engagement requests for a specific site.\n  * `operator_id` - See engagement requests for a specific operator.\n  * `queue_id` - See engagement requests for a specific queue.\n  * `type` - Type of engagement request. Possible values are `proactive`, `reactive`, `transfer`.\n  * `source` - reactive engagement request starting source (`button_embed`, `callout`, `hotlink`,\n`external_button`, `tab`). See [engagement sources](ref:engagement#get_engagements-engagement-id-1).\n  * `outcome` - Engagement request outcome (`accepted`, `rejected`, `timed_out`, `visitor_left`, `visitor_cancel`,\n`operator_cancel`, `operator_left`, `error`, `delivered`).\n  * `offered_media` - See engagement requests where video, audio, phone, or chat was offered.\n  * `accepted_media` - See engagement requests where video, audio, phone, or chat was used.\n"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "field": {
                                    "type": "object",
                                    "description": "A filter object. Used with \"not\" filter type.",
                                    "oneOf": [
                                      {
                                        "allOf": [
                                          {
                                            "title": "Selector filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "selector",
                                                "description": "This should always be \"selector\".",
                                                "enum": [
                                                  "selector"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "example": "$dimension",
                                                "description": "The dimension to filter on."
                                              },
                                              "value": {
                                                "type": "string",
                                                "example": "$value"
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "operator_id",
                                                  "queue_id",
                                                  "type",
                                                  "source",
                                                  "outcome",
                                                  "offered_media",
                                                  "accepted_media"
                                                ],
                                                "description": "Possible filters:\n  * `site_id` - See engagement requests for a specific site.\n  * `operator_id` - See engagement requests for a specific operator.\n  * `queue_id` - See engagement requests for a specific queue.\n  * `type` - Type of engagement request. Possible values are `proactive`, `reactive`, `transfer`.\n  * `source` - reactive engagement request starting source (`button_embed`, `callout`, `hotlink`,\n`external_button`, `tab`). See [engagement sources](ref:engagement#get_engagements-engagement-id-1).\n  * `outcome` - Engagement request outcome (`accepted`, `rejected`, `timed_out`, `visitor_left`, `visitor_cancel`,\n`operator_cancel`, `operator_left`, `error`, `delivered`).\n  * `offered_media` - See engagement requests where video, audio, phone, or chat was offered.\n  * `accepted_media` - See engagement requests where video, audio, phone, or chat was used.\n"
                                              },
                                              "value": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "allOf": [
                                          {
                                            "title": "In filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "in",
                                                "description": "This should always be \"in\".",
                                                "enum": [
                                                  "in"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "example": "$dimension",
                                                "description": "The dimension to filter on."
                                              },
                                              "values": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string",
                                                  "example": "example_dimension_value"
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "operator_id",
                                                  "queue_id",
                                                  "type",
                                                  "source",
                                                  "outcome",
                                                  "offered_media",
                                                  "accepted_media"
                                                ],
                                                "description": "Possible filters:\n  * `site_id` - See engagement requests for a specific site.\n  * `operator_id` - See engagement requests for a specific operator.\n  * `queue_id` - See engagement requests for a specific queue.\n  * `type` - Type of engagement request. Possible values are `proactive`, `reactive`, `transfer`.\n  * `source` - reactive engagement request starting source (`button_embed`, `callout`, `hotlink`,\n`external_button`, `tab`). See [engagement sources](ref:engagement#get_engagements-engagement-id-1).\n  * `outcome` - Engagement request outcome (`accepted`, `rejected`, `timed_out`, `visitor_left`, `visitor_cancel`,\n`operator_cancel`, `operator_left`, `error`, `delivered`).\n  * `offered_media` - See engagement requests where video, audio, phone, or chat was offered.\n  * `accepted_media` - See engagement requests where video, audio, phone, or chat was used.\n"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "allOf": [
                                          {
                                            "title": "Bound filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "description": "This should always be \"bound\".",
                                                "enum": [
                                                  "bound"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "description": "The dimension to filter on."
                                              },
                                              "ordering": {
                                                "type": "string",
                                                "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                                "enum": [
                                                  "lexicographic",
                                                  "alphanumeric",
                                                  "numeric",
                                                  "strlen"
                                                ]
                                              },
                                              "lower": {
                                                "type": "string",
                                                "description": "The lower bound for the filter."
                                              },
                                              "upper": {
                                                "type": "string",
                                                "description": "The upper bound for the filter."
                                              },
                                              "lowerStrict": {
                                                "type": "boolean",
                                                "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                              },
                                              "upperStrict": {
                                                "type": "boolean",
                                                "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "dimension"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "operator_id",
                                                  "queue_id",
                                                  "type",
                                                  "source",
                                                  "outcome",
                                                  "offered_media",
                                                  "accepted_media"
                                                ],
                                                "description": "Possible filters:\n  * `site_id` - See engagement requests for a specific site.\n  * `operator_id` - See engagement requests for a specific operator.\n  * `queue_id` - See engagement requests for a specific queue.\n  * `type` - Type of engagement request. Possible values are `proactive`, `reactive`, `transfer`.\n  * `source` - reactive engagement request starting source (`button_embed`, `callout`, `hotlink`,\n`external_button`, `tab`). See [engagement sources](ref:engagement#get_engagements-engagement-id-1).\n  * `outcome` - Engagement request outcome (`accepted`, `rejected`, `timed_out`, `visitor_left`, `visitor_cancel`,\n`operator_cancel`, `operator_left`, `error`, `delivered`).\n  * `offered_media` - See engagement requests where video, audio, phone, or chat was offered.\n  * `accepted_media` - See engagement requests where video, audio, phone, or chat was used.\n"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "example": "017-02-20T00:00:00.000Z"
                      },
                      "count": {
                        "type": "integer",
                        "example": 17
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests. Endpoint is rate limited and limit is exceeded. Endpoint was called more than 5 times in a\nsecond by the same user.\n"
          }
        }
      }
    },
    "/engagements/stats/duration": {
      "post": {
        "summary": "Engagement durations",
        "tags": [
          "Counts"
        ],
        "description": "Returns the total and the average engagement leg durations in seconds for a queried time period.\n\nThe user performing this request must have at least manager role on the site.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "query_type": {
                        "type": "string",
                        "description": "This String should always be timeseries.",
                        "example": "timeseries"
                      },
                      "granularity": {
                        "type": "string",
                        "description": "Defines the granularity to bucket query results. See [Granularities](doc:granularities).",
                        "example": "all"
                      },
                      "start_date": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp. Defines the query start date (inclusive).",
                        "example": "2017-02-20T00:00:00Z"
                      },
                      "end_date": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp. Defines the query end date (exclusive).",
                        "example": "2017-02-24T00:00:00Z"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "filter": {
                        "oneOf": [
                          {
                            "allOf": [
                              {
                                "title": "Selector filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "selector",
                                    "description": "This should always be \"selector\".",
                                    "enum": [
                                      "selector"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "example": "$dimension",
                                    "description": "The dimension to filter on."
                                  },
                                  "value": {
                                    "type": "string",
                                    "example": "$value"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "operator_id",
                                      "queue_id",
                                      "type",
                                      "highest_operator_media",
                                      "highest_visitor_media",
                                      "end_reason"
                                    ],
                                    "description": "Possible filters:\n  * `site_id` - A `site_id` whose engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n  * `queue_id` - If specified, then the considered engagements will be limited to engagements that resulted from\nqueues of given queue IDs. Transferred engagements are also considered to be resulted from that queue.\n  * `type` - If specified, then the considered engagements will be limited to engagements initiated by the given\ntype of request. Possible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the operator was the specified media. Possible media types, from highest to\nlowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the visitor was the specified media. Possible media types from highest to lowest\nare `video`, `audio`, `chat`.\n  * `end_reason` - If specified, then the considered engagements will be limited to engagements that ended in a\ncertain way. Possible values are `transfer` and `engagement_end`\n"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "In filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "in",
                                    "description": "This should always be \"in\".",
                                    "enum": [
                                      "in"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "example": "$dimension",
                                    "description": "The dimension to filter on."
                                  },
                                  "values": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "example_dimension_value"
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "operator_id",
                                      "queue_id",
                                      "type",
                                      "highest_operator_media",
                                      "highest_visitor_media",
                                      "end_reason"
                                    ],
                                    "description": "Possible filters:\n  * `site_id` - A `site_id` whose engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n  * `queue_id` - If specified, then the considered engagements will be limited to engagements that resulted from\nqueues of given queue IDs. Transferred engagements are also considered to be resulted from that queue.\n  * `type` - If specified, then the considered engagements will be limited to engagements initiated by the given\ntype of request. Possible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the operator was the specified media. Possible media types, from highest to\nlowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the visitor was the specified media. Possible media types from highest to lowest\nare `video`, `audio`, `chat`.\n  * `end_reason` - If specified, then the considered engagements will be limited to engagements that ended in a\ncertain way. Possible values are `transfer` and `engagement_end`\n"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "Bound filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "This should always be \"bound\".",
                                    "enum": [
                                      "bound"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "description": "The dimension to filter on."
                                  },
                                  "ordering": {
                                    "type": "string",
                                    "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                    "enum": [
                                      "lexicographic",
                                      "alphanumeric",
                                      "numeric",
                                      "strlen"
                                    ]
                                  },
                                  "lower": {
                                    "type": "string",
                                    "description": "The lower bound for the filter."
                                  },
                                  "upper": {
                                    "type": "string",
                                    "description": "The upper bound for the filter."
                                  },
                                  "lowerStrict": {
                                    "type": "boolean",
                                    "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                  },
                                  "upperStrict": {
                                    "type": "boolean",
                                    "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                  }
                                },
                                "required": [
                                  "type",
                                  "dimension"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "operator_id",
                                      "queue_id",
                                      "type",
                                      "highest_operator_media",
                                      "highest_visitor_media",
                                      "end_reason"
                                    ],
                                    "description": "Possible filters:\n  * `site_id` - A `site_id` whose engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n  * `queue_id` - If specified, then the considered engagements will be limited to engagements that resulted from\nqueues of given queue IDs. Transferred engagements are also considered to be resulted from that queue.\n  * `type` - If specified, then the considered engagements will be limited to engagements initiated by the given\ntype of request. Possible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the operator was the specified media. Possible media types, from highest to\nlowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the visitor was the specified media. Possible media types from highest to lowest\nare `video`, `audio`, `chat`.\n  * `end_reason` - If specified, then the considered engagements will be limited to engagements that ended in a\ncertain way. Possible values are `transfer` and `engagement_end`\n"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "Logical expression filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Should be one of \"and\", \"or\" or \"not\".",
                                    "enum": [
                                      "and",
                                      "or",
                                      "not"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "fields": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "allOf": [
                                            {
                                              "title": "Selector filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "example": "selector",
                                                  "description": "This should always be \"selector\".",
                                                  "enum": [
                                                    "selector"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "example": "$dimension",
                                                  "description": "The dimension to filter on."
                                                },
                                                "value": {
                                                  "type": "string",
                                                  "example": "$value"
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "operator_id",
                                                    "queue_id",
                                                    "type",
                                                    "highest_operator_media",
                                                    "highest_visitor_media",
                                                    "end_reason"
                                                  ],
                                                  "description": "Possible filters:\n  * `site_id` - A `site_id` whose engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n  * `queue_id` - If specified, then the considered engagements will be limited to engagements that resulted from\nqueues of given queue IDs. Transferred engagements are also considered to be resulted from that queue.\n  * `type` - If specified, then the considered engagements will be limited to engagements initiated by the given\ntype of request. Possible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the operator was the specified media. Possible media types, from highest to\nlowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the visitor was the specified media. Possible media types from highest to lowest\nare `video`, `audio`, `chat`.\n  * `end_reason` - If specified, then the considered engagements will be limited to engagements that ended in a\ncertain way. Possible values are `transfer` and `engagement_end`\n"
                                                },
                                                "value": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "title": "In filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "example": "in",
                                                  "description": "This should always be \"in\".",
                                                  "enum": [
                                                    "in"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "example": "$dimension",
                                                  "description": "The dimension to filter on."
                                                },
                                                "values": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string",
                                                    "example": "example_dimension_value"
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "operator_id",
                                                    "queue_id",
                                                    "type",
                                                    "highest_operator_media",
                                                    "highest_visitor_media",
                                                    "end_reason"
                                                  ],
                                                  "description": "Possible filters:\n  * `site_id` - A `site_id` whose engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n  * `queue_id` - If specified, then the considered engagements will be limited to engagements that resulted from\nqueues of given queue IDs. Transferred engagements are also considered to be resulted from that queue.\n  * `type` - If specified, then the considered engagements will be limited to engagements initiated by the given\ntype of request. Possible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the operator was the specified media. Possible media types, from highest to\nlowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the visitor was the specified media. Possible media types from highest to lowest\nare `video`, `audio`, `chat`.\n  * `end_reason` - If specified, then the considered engagements will be limited to engagements that ended in a\ncertain way. Possible values are `transfer` and `engagement_end`\n"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "title": "Bound filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "description": "This should always be \"bound\".",
                                                  "enum": [
                                                    "bound"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "description": "The dimension to filter on."
                                                },
                                                "ordering": {
                                                  "type": "string",
                                                  "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                                  "enum": [
                                                    "lexicographic",
                                                    "alphanumeric",
                                                    "numeric",
                                                    "strlen"
                                                  ]
                                                },
                                                "lower": {
                                                  "type": "string",
                                                  "description": "The lower bound for the filter."
                                                },
                                                "upper": {
                                                  "type": "string",
                                                  "description": "The upper bound for the filter."
                                                },
                                                "lowerStrict": {
                                                  "type": "boolean",
                                                  "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                                },
                                                "upperStrict": {
                                                  "type": "boolean",
                                                  "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "dimension"
                                              ]
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "operator_id",
                                                    "queue_id",
                                                    "type",
                                                    "highest_operator_media",
                                                    "highest_visitor_media",
                                                    "end_reason"
                                                  ],
                                                  "description": "Possible filters:\n  * `site_id` - A `site_id` whose engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n  * `queue_id` - If specified, then the considered engagements will be limited to engagements that resulted from\nqueues of given queue IDs. Transferred engagements are also considered to be resulted from that queue.\n  * `type` - If specified, then the considered engagements will be limited to engagements initiated by the given\ntype of request. Possible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the operator was the specified media. Possible media types, from highest to\nlowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the visitor was the specified media. Possible media types from highest to lowest\nare `video`, `audio`, `chat`.\n  * `end_reason` - If specified, then the considered engagements will be limited to engagements that ended in a\ncertain way. Possible values are `transfer` and `engagement_end`\n"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "field": {
                                    "type": "object",
                                    "description": "A filter object. Used with \"not\" filter type.",
                                    "oneOf": [
                                      {
                                        "allOf": [
                                          {
                                            "title": "Selector filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "selector",
                                                "description": "This should always be \"selector\".",
                                                "enum": [
                                                  "selector"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "example": "$dimension",
                                                "description": "The dimension to filter on."
                                              },
                                              "value": {
                                                "type": "string",
                                                "example": "$value"
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "operator_id",
                                                  "queue_id",
                                                  "type",
                                                  "highest_operator_media",
                                                  "highest_visitor_media",
                                                  "end_reason"
                                                ],
                                                "description": "Possible filters:\n  * `site_id` - A `site_id` whose engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n  * `queue_id` - If specified, then the considered engagements will be limited to engagements that resulted from\nqueues of given queue IDs. Transferred engagements are also considered to be resulted from that queue.\n  * `type` - If specified, then the considered engagements will be limited to engagements initiated by the given\ntype of request. Possible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the operator was the specified media. Possible media types, from highest to\nlowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the visitor was the specified media. Possible media types from highest to lowest\nare `video`, `audio`, `chat`.\n  * `end_reason` - If specified, then the considered engagements will be limited to engagements that ended in a\ncertain way. Possible values are `transfer` and `engagement_end`\n"
                                              },
                                              "value": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "allOf": [
                                          {
                                            "title": "In filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "in",
                                                "description": "This should always be \"in\".",
                                                "enum": [
                                                  "in"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "example": "$dimension",
                                                "description": "The dimension to filter on."
                                              },
                                              "values": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string",
                                                  "example": "example_dimension_value"
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "operator_id",
                                                  "queue_id",
                                                  "type",
                                                  "highest_operator_media",
                                                  "highest_visitor_media",
                                                  "end_reason"
                                                ],
                                                "description": "Possible filters:\n  * `site_id` - A `site_id` whose engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n  * `queue_id` - If specified, then the considered engagements will be limited to engagements that resulted from\nqueues of given queue IDs. Transferred engagements are also considered to be resulted from that queue.\n  * `type` - If specified, then the considered engagements will be limited to engagements initiated by the given\ntype of request. Possible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the operator was the specified media. Possible media types, from highest to\nlowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the visitor was the specified media. Possible media types from highest to lowest\nare `video`, `audio`, `chat`.\n  * `end_reason` - If specified, then the considered engagements will be limited to engagements that ended in a\ncertain way. Possible values are `transfer` and `engagement_end`\n"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "allOf": [
                                          {
                                            "title": "Bound filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "description": "This should always be \"bound\".",
                                                "enum": [
                                                  "bound"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "description": "The dimension to filter on."
                                              },
                                              "ordering": {
                                                "type": "string",
                                                "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                                "enum": [
                                                  "lexicographic",
                                                  "alphanumeric",
                                                  "numeric",
                                                  "strlen"
                                                ]
                                              },
                                              "lower": {
                                                "type": "string",
                                                "description": "The lower bound for the filter."
                                              },
                                              "upper": {
                                                "type": "string",
                                                "description": "The upper bound for the filter."
                                              },
                                              "lowerStrict": {
                                                "type": "boolean",
                                                "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                              },
                                              "upperStrict": {
                                                "type": "boolean",
                                                "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "dimension"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "operator_id",
                                                  "queue_id",
                                                  "type",
                                                  "highest_operator_media",
                                                  "highest_visitor_media",
                                                  "end_reason"
                                                ],
                                                "description": "Possible filters:\n  * `site_id` - A `site_id` whose engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n  * `queue_id` - If specified, then the considered engagements will be limited to engagements that resulted from\nqueues of given queue IDs. Transferred engagements are also considered to be resulted from that queue.\n  * `type` - If specified, then the considered engagements will be limited to engagements initiated by the given\ntype of request. Possible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the operator was the specified media. Possible media types, from highest to\nlowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered engagements will be limited to engagements during\nwhich the highest media used by the visitor was the specified media. Possible media types from highest to lowest\nare `video`, `audio`, `chat`.\n  * `end_reason` - If specified, then the considered engagements will be limited to engagements that ended in a\ncertain way. Possible values are `transfer` and `engagement_end`\n"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "example": "017-02-20T00:00:00.000Z"
                          },
                          "count": {
                            "type": "integer",
                            "example": 17
                          }
                        }
                      },
                      {
                        "properties": {
                          "seconds": {
                            "type": "integer",
                            "example": 568
                          },
                          "average_duration_in_seconds": {
                            "type": "integer",
                            "example": 192
                          },
                          "total_duration_in_seconds": {
                            "type": "integer",
                            "example": 568
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests. Endpoint is rate limited and limit is exceeded. Endpoint was called more than 5 times in a\nsecond by the same user.\n"
          }
        }
      }
    },
    "/engagements/stats/post_engagement_duration": {
      "post": {
        "summary": "Post-engagement durations",
        "tags": [
          "Counts"
        ],
        "description": "Returns the total and the average of post-engagement durations in seconds for a queried time period.\n\nThe user performing this request must have at least manager role on the site.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "query_type": {
                        "type": "string",
                        "description": "This String should always be timeseries.",
                        "example": "timeseries"
                      },
                      "granularity": {
                        "type": "string",
                        "description": "Defines the granularity to bucket query results. See [Granularities](doc:granularities).",
                        "example": "all"
                      },
                      "start_date": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp. Defines the query start date (inclusive).",
                        "example": "2017-02-20T00:00:00Z"
                      },
                      "end_date": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp. Defines the query end date (exclusive).",
                        "example": "2017-02-24T00:00:00Z"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "filter": {
                        "oneOf": [
                          {
                            "allOf": [
                              {
                                "title": "Selector filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "selector",
                                    "description": "This should always be \"selector\".",
                                    "enum": [
                                      "selector"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "example": "$dimension",
                                    "description": "The dimension to filter on."
                                  },
                                  "value": {
                                    "type": "string",
                                    "example": "$value"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "operator_id",
                                      "queue_id",
                                      "type",
                                      "highest_operator_media",
                                      "highest_visitor_media",
                                      "user_type"
                                    ],
                                    "description": "Possible filters:\n  * `site_id` - `A site_id` whose post engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose post engagements will be included in the calculations (only for\n`user_type: operator`).\n  * `queue_id` - If specified, then the considered post engagements will be limited to post engagements that\nresulted from queues of given queue IDs. Transferred post engagements are also considered to be resulted from that\nqueue.\n  * `type` - If specified, then the considered post engagements will be limited to engagements by the type.\nPossible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the operator was the specified media. Possible media types, from highest\nto lowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the visitor was the specified media. Possible media types from\nhighest to lowest, are `video`, `audio`, `chat`.\n  * `user_type` - If specified, then the considered post engagements will be limited to user type. Possible user\ntypes are `operator`, `visitor`.\n"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "In filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "in",
                                    "description": "This should always be \"in\".",
                                    "enum": [
                                      "in"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "example": "$dimension",
                                    "description": "The dimension to filter on."
                                  },
                                  "values": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "example_dimension_value"
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "operator_id",
                                      "queue_id",
                                      "type",
                                      "highest_operator_media",
                                      "highest_visitor_media",
                                      "user_type"
                                    ],
                                    "description": "Possible filters:\n  * `site_id` - `A site_id` whose post engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose post engagements will be included in the calculations (only for\n`user_type: operator`).\n  * `queue_id` - If specified, then the considered post engagements will be limited to post engagements that\nresulted from queues of given queue IDs. Transferred post engagements are also considered to be resulted from that\nqueue.\n  * `type` - If specified, then the considered post engagements will be limited to engagements by the type.\nPossible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the operator was the specified media. Possible media types, from highest\nto lowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the visitor was the specified media. Possible media types from\nhighest to lowest, are `video`, `audio`, `chat`.\n  * `user_type` - If specified, then the considered post engagements will be limited to user type. Possible user\ntypes are `operator`, `visitor`.\n"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "Bound filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "This should always be \"bound\".",
                                    "enum": [
                                      "bound"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "description": "The dimension to filter on."
                                  },
                                  "ordering": {
                                    "type": "string",
                                    "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                    "enum": [
                                      "lexicographic",
                                      "alphanumeric",
                                      "numeric",
                                      "strlen"
                                    ]
                                  },
                                  "lower": {
                                    "type": "string",
                                    "description": "The lower bound for the filter."
                                  },
                                  "upper": {
                                    "type": "string",
                                    "description": "The upper bound for the filter."
                                  },
                                  "lowerStrict": {
                                    "type": "boolean",
                                    "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                  },
                                  "upperStrict": {
                                    "type": "boolean",
                                    "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                  }
                                },
                                "required": [
                                  "type",
                                  "dimension"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "operator_id",
                                      "queue_id",
                                      "type",
                                      "highest_operator_media",
                                      "highest_visitor_media",
                                      "user_type"
                                    ],
                                    "description": "Possible filters:\n  * `site_id` - `A site_id` whose post engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose post engagements will be included in the calculations (only for\n`user_type: operator`).\n  * `queue_id` - If specified, then the considered post engagements will be limited to post engagements that\nresulted from queues of given queue IDs. Transferred post engagements are also considered to be resulted from that\nqueue.\n  * `type` - If specified, then the considered post engagements will be limited to engagements by the type.\nPossible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the operator was the specified media. Possible media types, from highest\nto lowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the visitor was the specified media. Possible media types from\nhighest to lowest, are `video`, `audio`, `chat`.\n  * `user_type` - If specified, then the considered post engagements will be limited to user type. Possible user\ntypes are `operator`, `visitor`.\n"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "Logical expression filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Should be one of \"and\", \"or\" or \"not\".",
                                    "enum": [
                                      "and",
                                      "or",
                                      "not"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "fields": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "allOf": [
                                            {
                                              "title": "Selector filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "example": "selector",
                                                  "description": "This should always be \"selector\".",
                                                  "enum": [
                                                    "selector"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "example": "$dimension",
                                                  "description": "The dimension to filter on."
                                                },
                                                "value": {
                                                  "type": "string",
                                                  "example": "$value"
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "operator_id",
                                                    "queue_id",
                                                    "type",
                                                    "highest_operator_media",
                                                    "highest_visitor_media",
                                                    "user_type"
                                                  ],
                                                  "description": "Possible filters:\n  * `site_id` - `A site_id` whose post engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose post engagements will be included in the calculations (only for\n`user_type: operator`).\n  * `queue_id` - If specified, then the considered post engagements will be limited to post engagements that\nresulted from queues of given queue IDs. Transferred post engagements are also considered to be resulted from that\nqueue.\n  * `type` - If specified, then the considered post engagements will be limited to engagements by the type.\nPossible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the operator was the specified media. Possible media types, from highest\nto lowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the visitor was the specified media. Possible media types from\nhighest to lowest, are `video`, `audio`, `chat`.\n  * `user_type` - If specified, then the considered post engagements will be limited to user type. Possible user\ntypes are `operator`, `visitor`.\n"
                                                },
                                                "value": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "title": "In filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "example": "in",
                                                  "description": "This should always be \"in\".",
                                                  "enum": [
                                                    "in"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "example": "$dimension",
                                                  "description": "The dimension to filter on."
                                                },
                                                "values": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string",
                                                    "example": "example_dimension_value"
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "operator_id",
                                                    "queue_id",
                                                    "type",
                                                    "highest_operator_media",
                                                    "highest_visitor_media",
                                                    "user_type"
                                                  ],
                                                  "description": "Possible filters:\n  * `site_id` - `A site_id` whose post engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose post engagements will be included in the calculations (only for\n`user_type: operator`).\n  * `queue_id` - If specified, then the considered post engagements will be limited to post engagements that\nresulted from queues of given queue IDs. Transferred post engagements are also considered to be resulted from that\nqueue.\n  * `type` - If specified, then the considered post engagements will be limited to engagements by the type.\nPossible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the operator was the specified media. Possible media types, from highest\nto lowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the visitor was the specified media. Possible media types from\nhighest to lowest, are `video`, `audio`, `chat`.\n  * `user_type` - If specified, then the considered post engagements will be limited to user type. Possible user\ntypes are `operator`, `visitor`.\n"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "title": "Bound filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "description": "This should always be \"bound\".",
                                                  "enum": [
                                                    "bound"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "description": "The dimension to filter on."
                                                },
                                                "ordering": {
                                                  "type": "string",
                                                  "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                                  "enum": [
                                                    "lexicographic",
                                                    "alphanumeric",
                                                    "numeric",
                                                    "strlen"
                                                  ]
                                                },
                                                "lower": {
                                                  "type": "string",
                                                  "description": "The lower bound for the filter."
                                                },
                                                "upper": {
                                                  "type": "string",
                                                  "description": "The upper bound for the filter."
                                                },
                                                "lowerStrict": {
                                                  "type": "boolean",
                                                  "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                                },
                                                "upperStrict": {
                                                  "type": "boolean",
                                                  "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "dimension"
                                              ]
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "operator_id",
                                                    "queue_id",
                                                    "type",
                                                    "highest_operator_media",
                                                    "highest_visitor_media",
                                                    "user_type"
                                                  ],
                                                  "description": "Possible filters:\n  * `site_id` - `A site_id` whose post engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose post engagements will be included in the calculations (only for\n`user_type: operator`).\n  * `queue_id` - If specified, then the considered post engagements will be limited to post engagements that\nresulted from queues of given queue IDs. Transferred post engagements are also considered to be resulted from that\nqueue.\n  * `type` - If specified, then the considered post engagements will be limited to engagements by the type.\nPossible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the operator was the specified media. Possible media types, from highest\nto lowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the visitor was the specified media. Possible media types from\nhighest to lowest, are `video`, `audio`, `chat`.\n  * `user_type` - If specified, then the considered post engagements will be limited to user type. Possible user\ntypes are `operator`, `visitor`.\n"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "field": {
                                    "type": "object",
                                    "description": "A filter object. Used with \"not\" filter type.",
                                    "oneOf": [
                                      {
                                        "allOf": [
                                          {
                                            "title": "Selector filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "selector",
                                                "description": "This should always be \"selector\".",
                                                "enum": [
                                                  "selector"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "example": "$dimension",
                                                "description": "The dimension to filter on."
                                              },
                                              "value": {
                                                "type": "string",
                                                "example": "$value"
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "operator_id",
                                                  "queue_id",
                                                  "type",
                                                  "highest_operator_media",
                                                  "highest_visitor_media",
                                                  "user_type"
                                                ],
                                                "description": "Possible filters:\n  * `site_id` - `A site_id` whose post engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose post engagements will be included in the calculations (only for\n`user_type: operator`).\n  * `queue_id` - If specified, then the considered post engagements will be limited to post engagements that\nresulted from queues of given queue IDs. Transferred post engagements are also considered to be resulted from that\nqueue.\n  * `type` - If specified, then the considered post engagements will be limited to engagements by the type.\nPossible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the operator was the specified media. Possible media types, from highest\nto lowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the visitor was the specified media. Possible media types from\nhighest to lowest, are `video`, `audio`, `chat`.\n  * `user_type` - If specified, then the considered post engagements will be limited to user type. Possible user\ntypes are `operator`, `visitor`.\n"
                                              },
                                              "value": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "allOf": [
                                          {
                                            "title": "In filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "in",
                                                "description": "This should always be \"in\".",
                                                "enum": [
                                                  "in"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "example": "$dimension",
                                                "description": "The dimension to filter on."
                                              },
                                              "values": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string",
                                                  "example": "example_dimension_value"
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "operator_id",
                                                  "queue_id",
                                                  "type",
                                                  "highest_operator_media",
                                                  "highest_visitor_media",
                                                  "user_type"
                                                ],
                                                "description": "Possible filters:\n  * `site_id` - `A site_id` whose post engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose post engagements will be included in the calculations (only for\n`user_type: operator`).\n  * `queue_id` - If specified, then the considered post engagements will be limited to post engagements that\nresulted from queues of given queue IDs. Transferred post engagements are also considered to be resulted from that\nqueue.\n  * `type` - If specified, then the considered post engagements will be limited to engagements by the type.\nPossible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the operator was the specified media. Possible media types, from highest\nto lowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the visitor was the specified media. Possible media types from\nhighest to lowest, are `video`, `audio`, `chat`.\n  * `user_type` - If specified, then the considered post engagements will be limited to user type. Possible user\ntypes are `operator`, `visitor`.\n"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "allOf": [
                                          {
                                            "title": "Bound filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "description": "This should always be \"bound\".",
                                                "enum": [
                                                  "bound"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "description": "The dimension to filter on."
                                              },
                                              "ordering": {
                                                "type": "string",
                                                "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                                "enum": [
                                                  "lexicographic",
                                                  "alphanumeric",
                                                  "numeric",
                                                  "strlen"
                                                ]
                                              },
                                              "lower": {
                                                "type": "string",
                                                "description": "The lower bound for the filter."
                                              },
                                              "upper": {
                                                "type": "string",
                                                "description": "The upper bound for the filter."
                                              },
                                              "lowerStrict": {
                                                "type": "boolean",
                                                "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                              },
                                              "upperStrict": {
                                                "type": "boolean",
                                                "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "dimension"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "operator_id",
                                                  "queue_id",
                                                  "type",
                                                  "highest_operator_media",
                                                  "highest_visitor_media",
                                                  "user_type"
                                                ],
                                                "description": "Possible filters:\n  * `site_id` - `A site_id` whose post engagements will be included in the calculations.\n  * `operator_id` - An `operator_id` whose post engagements will be included in the calculations (only for\n`user_type: operator`).\n  * `queue_id` - If specified, then the considered post engagements will be limited to post engagements that\nresulted from queues of given queue IDs. Transferred post engagements are also considered to be resulted from that\nqueue.\n  * `type` - If specified, then the considered post engagements will be limited to engagements by the type.\nPossible types are `proactive`, `reactive`, `transfer`.\n  * `highest_operator_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the operator was the specified media. Possible media types, from highest\nto lowest, are `video`, `audio`, `chat`.\n  * `highest_visitor_media` - If specified, then the considered post engagements will be limited to engagements\nduring which the highest media used by the visitor was the specified media. Possible media types from\nhighest to lowest, are `video`, `audio`, `chat`.\n  * `user_type` - If specified, then the considered post engagements will be limited to user type. Possible user\ntypes are `operator`, `visitor`.\n"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "example": "017-02-20T00:00:00.000Z"
                          },
                          "count": {
                            "type": "integer",
                            "example": 17
                          }
                        }
                      },
                      {
                        "properties": {
                          "seconds": {
                            "type": "integer",
                            "example": 568
                          },
                          "average_duration_in_seconds": {
                            "type": "integer",
                            "example": 192
                          },
                          "total_duration_in_seconds": {
                            "type": "integer",
                            "example": 568
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests. Endpoint is rate limited and limit is exceeded. Endpoint was called more than 5 times in a\nsecond by the same user.\n"
          }
        }
      }
    },
    "/engagements/stats/cobrowsing": {
      "post": {
        "summary": "CoBrowsing count",
        "tags": [
          "Counts"
        ],
        "description": "Returns approximate count of engagements where CoBrowsing was used.\n\nThe user performing this request must have at least manager role on the site.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "query_type": {
                        "type": "string",
                        "description": "This String should always be timeseries.",
                        "example": "timeseries"
                      },
                      "granularity": {
                        "type": "string",
                        "description": "Defines the granularity to bucket query results. See [Granularities](doc:granularities).",
                        "example": "all"
                      },
                      "start_date": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp. Defines the query start date (inclusive).",
                        "example": "2017-02-20T00:00:00Z"
                      },
                      "end_date": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp. Defines the query end date (exclusive).",
                        "example": "2017-02-24T00:00:00Z"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "filter": {
                        "oneOf": [
                          {
                            "allOf": [
                              {
                                "title": "Selector filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "selector",
                                    "description": "This should always be \"selector\".",
                                    "enum": [
                                      "selector"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "example": "$dimension",
                                    "description": "The dimension to filter on."
                                  },
                                  "value": {
                                    "type": "string",
                                    "example": "$value"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "operator_id"
                                    ],
                                    "description": "Possible filters:\n * `site_id` - A `site_id` whose engagements will be included in the calculations.\n * `operator_id' - An `operator_id` whose engagements will be included in the calculations.\n"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "In filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "in",
                                    "description": "This should always be \"in\".",
                                    "enum": [
                                      "in"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "example": "$dimension",
                                    "description": "The dimension to filter on."
                                  },
                                  "values": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "example_dimension_value"
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "operator_id"
                                    ],
                                    "description": "Possible filters:\n * `site_id` - A `site_id` whose engagements will be included in the calculations.\n * `operator_id' - An `operator_id` whose engagements will be included in the calculations.\n"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "Bound filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "This should always be \"bound\".",
                                    "enum": [
                                      "bound"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "description": "The dimension to filter on."
                                  },
                                  "ordering": {
                                    "type": "string",
                                    "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                    "enum": [
                                      "lexicographic",
                                      "alphanumeric",
                                      "numeric",
                                      "strlen"
                                    ]
                                  },
                                  "lower": {
                                    "type": "string",
                                    "description": "The lower bound for the filter."
                                  },
                                  "upper": {
                                    "type": "string",
                                    "description": "The upper bound for the filter."
                                  },
                                  "lowerStrict": {
                                    "type": "boolean",
                                    "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                  },
                                  "upperStrict": {
                                    "type": "boolean",
                                    "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                  }
                                },
                                "required": [
                                  "type",
                                  "dimension"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "operator_id"
                                    ],
                                    "description": "Possible filters:\n * `site_id` - A `site_id` whose engagements will be included in the calculations.\n * `operator_id' - An `operator_id` whose engagements will be included in the calculations.\n"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "Logical expression filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Should be one of \"and\", \"or\" or \"not\".",
                                    "enum": [
                                      "and",
                                      "or",
                                      "not"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "fields": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "allOf": [
                                            {
                                              "title": "Selector filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "example": "selector",
                                                  "description": "This should always be \"selector\".",
                                                  "enum": [
                                                    "selector"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "example": "$dimension",
                                                  "description": "The dimension to filter on."
                                                },
                                                "value": {
                                                  "type": "string",
                                                  "example": "$value"
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "operator_id"
                                                  ],
                                                  "description": "Possible filters:\n * `site_id` - A `site_id` whose engagements will be included in the calculations.\n * `operator_id' - An `operator_id` whose engagements will be included in the calculations.\n"
                                                },
                                                "value": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "title": "In filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "example": "in",
                                                  "description": "This should always be \"in\".",
                                                  "enum": [
                                                    "in"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "example": "$dimension",
                                                  "description": "The dimension to filter on."
                                                },
                                                "values": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string",
                                                    "example": "example_dimension_value"
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "operator_id"
                                                  ],
                                                  "description": "Possible filters:\n * `site_id` - A `site_id` whose engagements will be included in the calculations.\n * `operator_id' - An `operator_id` whose engagements will be included in the calculations.\n"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "title": "Bound filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "description": "This should always be \"bound\".",
                                                  "enum": [
                                                    "bound"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "description": "The dimension to filter on."
                                                },
                                                "ordering": {
                                                  "type": "string",
                                                  "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                                  "enum": [
                                                    "lexicographic",
                                                    "alphanumeric",
                                                    "numeric",
                                                    "strlen"
                                                  ]
                                                },
                                                "lower": {
                                                  "type": "string",
                                                  "description": "The lower bound for the filter."
                                                },
                                                "upper": {
                                                  "type": "string",
                                                  "description": "The upper bound for the filter."
                                                },
                                                "lowerStrict": {
                                                  "type": "boolean",
                                                  "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                                },
                                                "upperStrict": {
                                                  "type": "boolean",
                                                  "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "dimension"
                                              ]
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "operator_id"
                                                  ],
                                                  "description": "Possible filters:\n * `site_id` - A `site_id` whose engagements will be included in the calculations.\n * `operator_id' - An `operator_id` whose engagements will be included in the calculations.\n"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "field": {
                                    "type": "object",
                                    "description": "A filter object. Used with \"not\" filter type.",
                                    "oneOf": [
                                      {
                                        "allOf": [
                                          {
                                            "title": "Selector filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "selector",
                                                "description": "This should always be \"selector\".",
                                                "enum": [
                                                  "selector"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "example": "$dimension",
                                                "description": "The dimension to filter on."
                                              },
                                              "value": {
                                                "type": "string",
                                                "example": "$value"
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "operator_id"
                                                ],
                                                "description": "Possible filters:\n * `site_id` - A `site_id` whose engagements will be included in the calculations.\n * `operator_id' - An `operator_id` whose engagements will be included in the calculations.\n"
                                              },
                                              "value": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "allOf": [
                                          {
                                            "title": "In filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "in",
                                                "description": "This should always be \"in\".",
                                                "enum": [
                                                  "in"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "example": "$dimension",
                                                "description": "The dimension to filter on."
                                              },
                                              "values": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string",
                                                  "example": "example_dimension_value"
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "operator_id"
                                                ],
                                                "description": "Possible filters:\n * `site_id` - A `site_id` whose engagements will be included in the calculations.\n * `operator_id' - An `operator_id` whose engagements will be included in the calculations.\n"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "allOf": [
                                          {
                                            "title": "Bound filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "description": "This should always be \"bound\".",
                                                "enum": [
                                                  "bound"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "description": "The dimension to filter on."
                                              },
                                              "ordering": {
                                                "type": "string",
                                                "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                                "enum": [
                                                  "lexicographic",
                                                  "alphanumeric",
                                                  "numeric",
                                                  "strlen"
                                                ]
                                              },
                                              "lower": {
                                                "type": "string",
                                                "description": "The lower bound for the filter."
                                              },
                                              "upper": {
                                                "type": "string",
                                                "description": "The upper bound for the filter."
                                              },
                                              "lowerStrict": {
                                                "type": "boolean",
                                                "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                              },
                                              "upperStrict": {
                                                "type": "boolean",
                                                "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "dimension"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "operator_id"
                                                ],
                                                "description": "Possible filters:\n * `site_id` - A `site_id` whose engagements will be included in the calculations.\n * `operator_id' - An `operator_id` whose engagements will be included in the calculations.\n"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "example": "017-02-20T00:00:00.000Z"
                      },
                      "count": {
                        "type": "integer",
                        "example": 17
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests. Endpoint is rate limited and limit is exceeded. Endpoint was called more than 5 times in a\nsecond by the same user.\n"
          }
        }
      }
    },
    "/engagements/stats/queue/wait_duration": {
      "post": {
        "summary": "Wait time",
        "tags": [
          "Counts"
        ],
        "description": "Returns statistics on how much time visitors have spent waiting in the queue, including average and maximum\nduration.\n\nThe user performing this request must have at least manager role on the site.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "query_type": {
                        "type": "string",
                        "description": "This String should always be timeseries.",
                        "example": "timeseries"
                      },
                      "granularity": {
                        "type": "string",
                        "description": "Defines the granularity to bucket query results. See [Granularities](doc:granularities).",
                        "example": "all"
                      },
                      "start_date": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp. Defines the query start date (inclusive).",
                        "example": "2017-02-20T00:00:00Z"
                      },
                      "end_date": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp. Defines the query end date (exclusive).",
                        "example": "2017-02-24T00:00:00Z"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "filter": {
                        "oneOf": [
                          {
                            "allOf": [
                              {
                                "title": "Selector filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "selector",
                                    "description": "This should always be \"selector\".",
                                    "enum": [
                                      "selector"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "example": "$dimension",
                                    "description": "The dimension to filter on."
                                  },
                                  "value": {
                                    "type": "string",
                                    "example": "$value"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "team_id",
                                      "queue_id",
                                      "media",
                                      "outcome",
                                      "from_transfer"
                                    ],
                                    "description": "Possible filters:\n  * `site_id` - Site ID\n  * `team_id` - Team ID\n  * `queue_id` - Queue ID\n  * `media` - Media type of engagement visitor is queued for (`video`, `audio`, `chat`).\n  * `outcome` - Queuing outcome\n  * `from_transfer` - If engagement was transferred to the queue, then `true` else `false`.\n"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "In filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "in",
                                    "description": "This should always be \"in\".",
                                    "enum": [
                                      "in"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "example": "$dimension",
                                    "description": "The dimension to filter on."
                                  },
                                  "values": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "example_dimension_value"
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "team_id",
                                      "queue_id",
                                      "media",
                                      "outcome",
                                      "from_transfer"
                                    ],
                                    "description": "Possible filters:\n  * `site_id` - Site ID\n  * `team_id` - Team ID\n  * `queue_id` - Queue ID\n  * `media` - Media type of engagement visitor is queued for (`video`, `audio`, `chat`).\n  * `outcome` - Queuing outcome\n  * `from_transfer` - If engagement was transferred to the queue, then `true` else `false`.\n"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "Bound filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "This should always be \"bound\".",
                                    "enum": [
                                      "bound"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "description": "The dimension to filter on."
                                  },
                                  "ordering": {
                                    "type": "string",
                                    "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                    "enum": [
                                      "lexicographic",
                                      "alphanumeric",
                                      "numeric",
                                      "strlen"
                                    ]
                                  },
                                  "lower": {
                                    "type": "string",
                                    "description": "The lower bound for the filter."
                                  },
                                  "upper": {
                                    "type": "string",
                                    "description": "The upper bound for the filter."
                                  },
                                  "lowerStrict": {
                                    "type": "boolean",
                                    "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                  },
                                  "upperStrict": {
                                    "type": "boolean",
                                    "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                  }
                                },
                                "required": [
                                  "type",
                                  "dimension"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "team_id",
                                      "queue_id",
                                      "media",
                                      "outcome",
                                      "from_transfer"
                                    ],
                                    "description": "Possible filters:\n  * `site_id` - Site ID\n  * `team_id` - Team ID\n  * `queue_id` - Queue ID\n  * `media` - Media type of engagement visitor is queued for (`video`, `audio`, `chat`).\n  * `outcome` - Queuing outcome\n  * `from_transfer` - If engagement was transferred to the queue, then `true` else `false`.\n"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "Logical expression filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Should be one of \"and\", \"or\" or \"not\".",
                                    "enum": [
                                      "and",
                                      "or",
                                      "not"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "fields": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "allOf": [
                                            {
                                              "title": "Selector filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "example": "selector",
                                                  "description": "This should always be \"selector\".",
                                                  "enum": [
                                                    "selector"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "example": "$dimension",
                                                  "description": "The dimension to filter on."
                                                },
                                                "value": {
                                                  "type": "string",
                                                  "example": "$value"
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "team_id",
                                                    "queue_id",
                                                    "media",
                                                    "outcome",
                                                    "from_transfer"
                                                  ],
                                                  "description": "Possible filters:\n  * `site_id` - Site ID\n  * `team_id` - Team ID\n  * `queue_id` - Queue ID\n  * `media` - Media type of engagement visitor is queued for (`video`, `audio`, `chat`).\n  * `outcome` - Queuing outcome\n  * `from_transfer` - If engagement was transferred to the queue, then `true` else `false`.\n"
                                                },
                                                "value": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "title": "In filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "example": "in",
                                                  "description": "This should always be \"in\".",
                                                  "enum": [
                                                    "in"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "example": "$dimension",
                                                  "description": "The dimension to filter on."
                                                },
                                                "values": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string",
                                                    "example": "example_dimension_value"
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "team_id",
                                                    "queue_id",
                                                    "media",
                                                    "outcome",
                                                    "from_transfer"
                                                  ],
                                                  "description": "Possible filters:\n  * `site_id` - Site ID\n  * `team_id` - Team ID\n  * `queue_id` - Queue ID\n  * `media` - Media type of engagement visitor is queued for (`video`, `audio`, `chat`).\n  * `outcome` - Queuing outcome\n  * `from_transfer` - If engagement was transferred to the queue, then `true` else `false`.\n"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "title": "Bound filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "description": "This should always be \"bound\".",
                                                  "enum": [
                                                    "bound"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "description": "The dimension to filter on."
                                                },
                                                "ordering": {
                                                  "type": "string",
                                                  "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                                  "enum": [
                                                    "lexicographic",
                                                    "alphanumeric",
                                                    "numeric",
                                                    "strlen"
                                                  ]
                                                },
                                                "lower": {
                                                  "type": "string",
                                                  "description": "The lower bound for the filter."
                                                },
                                                "upper": {
                                                  "type": "string",
                                                  "description": "The upper bound for the filter."
                                                },
                                                "lowerStrict": {
                                                  "type": "boolean",
                                                  "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                                },
                                                "upperStrict": {
                                                  "type": "boolean",
                                                  "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "dimension"
                                              ]
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "team_id",
                                                    "queue_id",
                                                    "media",
                                                    "outcome",
                                                    "from_transfer"
                                                  ],
                                                  "description": "Possible filters:\n  * `site_id` - Site ID\n  * `team_id` - Team ID\n  * `queue_id` - Queue ID\n  * `media` - Media type of engagement visitor is queued for (`video`, `audio`, `chat`).\n  * `outcome` - Queuing outcome\n  * `from_transfer` - If engagement was transferred to the queue, then `true` else `false`.\n"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "field": {
                                    "type": "object",
                                    "description": "A filter object. Used with \"not\" filter type.",
                                    "oneOf": [
                                      {
                                        "allOf": [
                                          {
                                            "title": "Selector filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "selector",
                                                "description": "This should always be \"selector\".",
                                                "enum": [
                                                  "selector"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "example": "$dimension",
                                                "description": "The dimension to filter on."
                                              },
                                              "value": {
                                                "type": "string",
                                                "example": "$value"
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "team_id",
                                                  "queue_id",
                                                  "media",
                                                  "outcome",
                                                  "from_transfer"
                                                ],
                                                "description": "Possible filters:\n  * `site_id` - Site ID\n  * `team_id` - Team ID\n  * `queue_id` - Queue ID\n  * `media` - Media type of engagement visitor is queued for (`video`, `audio`, `chat`).\n  * `outcome` - Queuing outcome\n  * `from_transfer` - If engagement was transferred to the queue, then `true` else `false`.\n"
                                              },
                                              "value": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "allOf": [
                                          {
                                            "title": "In filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "in",
                                                "description": "This should always be \"in\".",
                                                "enum": [
                                                  "in"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "example": "$dimension",
                                                "description": "The dimension to filter on."
                                              },
                                              "values": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string",
                                                  "example": "example_dimension_value"
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "team_id",
                                                  "queue_id",
                                                  "media",
                                                  "outcome",
                                                  "from_transfer"
                                                ],
                                                "description": "Possible filters:\n  * `site_id` - Site ID\n  * `team_id` - Team ID\n  * `queue_id` - Queue ID\n  * `media` - Media type of engagement visitor is queued for (`video`, `audio`, `chat`).\n  * `outcome` - Queuing outcome\n  * `from_transfer` - If engagement was transferred to the queue, then `true` else `false`.\n"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "allOf": [
                                          {
                                            "title": "Bound filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "description": "This should always be \"bound\".",
                                                "enum": [
                                                  "bound"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "description": "The dimension to filter on."
                                              },
                                              "ordering": {
                                                "type": "string",
                                                "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                                "enum": [
                                                  "lexicographic",
                                                  "alphanumeric",
                                                  "numeric",
                                                  "strlen"
                                                ]
                                              },
                                              "lower": {
                                                "type": "string",
                                                "description": "The lower bound for the filter."
                                              },
                                              "upper": {
                                                "type": "string",
                                                "description": "The upper bound for the filter."
                                              },
                                              "lowerStrict": {
                                                "type": "boolean",
                                                "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                              },
                                              "upperStrict": {
                                                "type": "boolean",
                                                "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "dimension"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "team_id",
                                                  "queue_id",
                                                  "media",
                                                  "outcome",
                                                  "from_transfer"
                                                ],
                                                "description": "Possible filters:\n  * `site_id` - Site ID\n  * `team_id` - Team ID\n  * `queue_id` - Queue ID\n  * `media` - Media type of engagement visitor is queued for (`video`, `audio`, `chat`).\n  * `outcome` - Queuing outcome\n  * `from_transfer` - If engagement was transferred to the queue, then `true` else `false`.\n"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "timestamp": {
                            "type": "string",
                            "example": "017-02-20T00:00:00.000Z"
                          },
                          "count": {
                            "type": "integer",
                            "example": 17
                          }
                        }
                      },
                      {
                        "properties": {
                          "seconds": {
                            "type": "integer",
                            "example": 0
                          },
                          "average_duration_in_seconds": {
                            "type": "integer",
                            "example": 15
                          },
                          "maximum_duration_in_seconds": {
                            "type": "integer",
                            "example": 27
                          },
                          "total_duration_in_seconds": {
                            "type": "integer",
                            "example": 165
                          },
                          "short_duration_count": {
                            "type": "integer",
                            "example": 5
                          },
                          "within_service_level_count": {
                            "type": "integer",
                            "example": 12
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests. Endpoint is rate limited and limit is exceeded. Endpoint was called more than 5 times in a\nsecond by the same user.\n"
          }
        }
      }
    },
    "/alerts/stats/count": {
      "post": {
        "summary": "Operator alert count",
        "tags": [
          "Counts"
        ],
        "description": "Returns operator alert count.\n\nThe user performing this request must have at least manager role on the site.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "query_type": {
                        "type": "string",
                        "description": "This string should always be group_by.",
                        "example": "group_by"
                      },
                      "dimensions": {
                        "type": "string",
                        "description": "A JSON list of dimensions over which to perform a group-by query."
                      },
                      "granularity": {
                        "type": "string",
                        "description": "Defines the granularity by which to bucket query results. See Granularities"
                      },
                      "start_date": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp. Defines the query start date (inclusive)."
                      },
                      "end_date": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp. Defines the query end date (exclusive)."
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "filter": {
                        "oneOf": [
                          {
                            "allOf": [
                              {
                                "title": "Selector filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "selector",
                                    "description": "This should always be \"selector\".",
                                    "enum": [
                                      "selector"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "example": "$dimension",
                                    "description": "The dimension to filter on."
                                  },
                                  "value": {
                                    "type": "string",
                                    "example": "$value"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "operator_id"
                                    ],
                                    "description": "Possible filters:\n * `site_id` - A `site_id` whose alerts will be included in the calculations.\n * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "In filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "in",
                                    "description": "This should always be \"in\".",
                                    "enum": [
                                      "in"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "example": "$dimension",
                                    "description": "The dimension to filter on."
                                  },
                                  "values": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "example_dimension_value"
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "operator_id"
                                    ],
                                    "description": "Possible filters:\n * `site_id` - A `site_id` whose alerts will be included in the calculations.\n * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "Bound filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "This should always be \"bound\".",
                                    "enum": [
                                      "bound"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "description": "The dimension to filter on."
                                  },
                                  "ordering": {
                                    "type": "string",
                                    "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                    "enum": [
                                      "lexicographic",
                                      "alphanumeric",
                                      "numeric",
                                      "strlen"
                                    ]
                                  },
                                  "lower": {
                                    "type": "string",
                                    "description": "The lower bound for the filter."
                                  },
                                  "upper": {
                                    "type": "string",
                                    "description": "The upper bound for the filter."
                                  },
                                  "lowerStrict": {
                                    "type": "boolean",
                                    "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                  },
                                  "upperStrict": {
                                    "type": "boolean",
                                    "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                  }
                                },
                                "required": [
                                  "type",
                                  "dimension"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string",
                                    "enum": [
                                      "site_id",
                                      "operator_id"
                                    ],
                                    "description": "Possible filters:\n * `site_id` - A `site_id` whose alerts will be included in the calculations.\n * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "Logical expression filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Should be one of \"and\", \"or\" or \"not\".",
                                    "enum": [
                                      "and",
                                      "or",
                                      "not"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "fields": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "allOf": [
                                            {
                                              "title": "Selector filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "example": "selector",
                                                  "description": "This should always be \"selector\".",
                                                  "enum": [
                                                    "selector"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "example": "$dimension",
                                                  "description": "The dimension to filter on."
                                                },
                                                "value": {
                                                  "type": "string",
                                                  "example": "$value"
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "operator_id"
                                                  ],
                                                  "description": "Possible filters:\n * `site_id` - A `site_id` whose alerts will be included in the calculations.\n * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n"
                                                },
                                                "value": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "title": "In filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "example": "in",
                                                  "description": "This should always be \"in\".",
                                                  "enum": [
                                                    "in"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "example": "$dimension",
                                                  "description": "The dimension to filter on."
                                                },
                                                "values": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string",
                                                    "example": "example_dimension_value"
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "operator_id"
                                                  ],
                                                  "description": "Possible filters:\n * `site_id` - A `site_id` whose alerts will be included in the calculations.\n * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "title": "Bound filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "description": "This should always be \"bound\".",
                                                  "enum": [
                                                    "bound"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "description": "The dimension to filter on."
                                                },
                                                "ordering": {
                                                  "type": "string",
                                                  "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                                  "enum": [
                                                    "lexicographic",
                                                    "alphanumeric",
                                                    "numeric",
                                                    "strlen"
                                                  ]
                                                },
                                                "lower": {
                                                  "type": "string",
                                                  "description": "The lower bound for the filter."
                                                },
                                                "upper": {
                                                  "type": "string",
                                                  "description": "The upper bound for the filter."
                                                },
                                                "lowerStrict": {
                                                  "type": "boolean",
                                                  "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                                },
                                                "upperStrict": {
                                                  "type": "boolean",
                                                  "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "dimension"
                                              ]
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string",
                                                  "enum": [
                                                    "site_id",
                                                    "operator_id"
                                                  ],
                                                  "description": "Possible filters:\n * `site_id` - A `site_id` whose alerts will be included in the calculations.\n * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "field": {
                                    "type": "object",
                                    "description": "A filter object. Used with \"not\" filter type.",
                                    "oneOf": [
                                      {
                                        "allOf": [
                                          {
                                            "title": "Selector filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "selector",
                                                "description": "This should always be \"selector\".",
                                                "enum": [
                                                  "selector"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "example": "$dimension",
                                                "description": "The dimension to filter on."
                                              },
                                              "value": {
                                                "type": "string",
                                                "example": "$value"
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "operator_id"
                                                ],
                                                "description": "Possible filters:\n * `site_id` - A `site_id` whose alerts will be included in the calculations.\n * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n"
                                              },
                                              "value": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "allOf": [
                                          {
                                            "title": "In filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "in",
                                                "description": "This should always be \"in\".",
                                                "enum": [
                                                  "in"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "example": "$dimension",
                                                "description": "The dimension to filter on."
                                              },
                                              "values": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string",
                                                  "example": "example_dimension_value"
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "operator_id"
                                                ],
                                                "description": "Possible filters:\n * `site_id` - A `site_id` whose alerts will be included in the calculations.\n * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "allOf": [
                                          {
                                            "title": "Bound filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "description": "This should always be \"bound\".",
                                                "enum": [
                                                  "bound"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "description": "The dimension to filter on."
                                              },
                                              "ordering": {
                                                "type": "string",
                                                "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                                "enum": [
                                                  "lexicographic",
                                                  "alphanumeric",
                                                  "numeric",
                                                  "strlen"
                                                ]
                                              },
                                              "lower": {
                                                "type": "string",
                                                "description": "The lower bound for the filter."
                                              },
                                              "upper": {
                                                "type": "string",
                                                "description": "The upper bound for the filter."
                                              },
                                              "lowerStrict": {
                                                "type": "boolean",
                                                "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                              },
                                              "upperStrict": {
                                                "type": "boolean",
                                                "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "dimension"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string",
                                                "enum": [
                                                  "site_id",
                                                  "operator_id"
                                                ],
                                                "description": "Possible filters:\n * `site_id` - A `site_id` whose alerts will be included in the calculations.\n * `operator_id` - An `operator_id` whose engagements will be included in the calculations.\n"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "example": "017-02-20T00:00:00.000Z"
                      },
                      "count": {
                        "type": "integer",
                        "example": 17
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests. Endpoint is rate limited and limit is exceeded. Endpoint was called more than 5 times in a\nsecond by the same user.\n"
          }
        }
      }
    },
    "/operators/stats/online_duration": {
      "post": {
        "summary": "Operator's online time",
        "tags": [
          "Counts"
        ],
        "description": "Returns operator online duration in seconds.\n\nThe user performing this request must have at least manager role on the site.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "query_type": {
                        "type": "string",
                        "description": "This String should always be timeseries.",
                        "example": "timeseries"
                      },
                      "granularity": {
                        "type": "string",
                        "description": "Defines the granularity to bucket query results. See [Granularities](doc:granularities).",
                        "example": "all"
                      },
                      "start_date": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp. Defines the query start date (inclusive).",
                        "example": "2017-02-20T00:00:00Z"
                      },
                      "end_date": {
                        "type": "string",
                        "description": "An ISO-8601 timestamp. Defines the query end date (exclusive).",
                        "example": "2017-02-24T00:00:00Z"
                      }
                    }
                  },
                  {
                    "type": "object",
                    "properties": {
                      "filter": {
                        "oneOf": [
                          {
                            "allOf": [
                              {
                                "title": "Selector filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "selector",
                                    "description": "This should always be \"selector\".",
                                    "enum": [
                                      "selector"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "example": "$dimension",
                                    "description": "The dimension to filter on."
                                  },
                                  "value": {
                                    "type": "string",
                                    "example": "$value"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string"
                                  },
                                  "value": {
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "In filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "example": "in",
                                    "description": "This should always be \"in\".",
                                    "enum": [
                                      "in"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "example": "$dimension",
                                    "description": "The dimension to filter on."
                                  },
                                  "values": {
                                    "type": "array",
                                    "items": {
                                      "type": "string",
                                      "example": "example_dimension_value"
                                    }
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "Bound filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "This should always be \"bound\".",
                                    "enum": [
                                      "bound"
                                    ]
                                  },
                                  "dimension": {
                                    "type": "string",
                                    "description": "The dimension to filter on."
                                  },
                                  "ordering": {
                                    "type": "string",
                                    "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                    "enum": [
                                      "lexicographic",
                                      "alphanumeric",
                                      "numeric",
                                      "strlen"
                                    ]
                                  },
                                  "lower": {
                                    "type": "string",
                                    "description": "The lower bound for the filter."
                                  },
                                  "upper": {
                                    "type": "string",
                                    "description": "The upper bound for the filter."
                                  },
                                  "lowerStrict": {
                                    "type": "boolean",
                                    "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                  },
                                  "upperStrict": {
                                    "type": "boolean",
                                    "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                  }
                                },
                                "required": [
                                  "type",
                                  "dimension"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "dimension": {
                                    "type": "string"
                                  }
                                }
                              }
                            ]
                          },
                          {
                            "allOf": [
                              {
                                "title": "Logical expression filter"
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Should be one of \"and\", \"or\" or \"not\".",
                                    "enum": [
                                      "and",
                                      "or",
                                      "not"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              {
                                "type": "object",
                                "properties": {
                                  "fields": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "oneOf": [
                                        {
                                          "allOf": [
                                            {
                                              "title": "Selector filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "example": "selector",
                                                  "description": "This should always be \"selector\".",
                                                  "enum": [
                                                    "selector"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "example": "$dimension",
                                                  "description": "The dimension to filter on."
                                                },
                                                "value": {
                                                  "type": "string",
                                                  "example": "$value"
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string"
                                                },
                                                "value": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "title": "In filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "example": "in",
                                                  "description": "This should always be \"in\".",
                                                  "enum": [
                                                    "in"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "example": "$dimension",
                                                  "description": "The dimension to filter on."
                                                },
                                                "values": {
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string",
                                                    "example": "example_dimension_value"
                                                  }
                                                }
                                              }
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        {
                                          "allOf": [
                                            {
                                              "title": "Bound filter"
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "description": "This should always be \"bound\".",
                                                  "enum": [
                                                    "bound"
                                                  ]
                                                },
                                                "dimension": {
                                                  "type": "string",
                                                  "description": "The dimension to filter on."
                                                },
                                                "ordering": {
                                                  "type": "string",
                                                  "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                                  "enum": [
                                                    "lexicographic",
                                                    "alphanumeric",
                                                    "numeric",
                                                    "strlen"
                                                  ]
                                                },
                                                "lower": {
                                                  "type": "string",
                                                  "description": "The lower bound for the filter."
                                                },
                                                "upper": {
                                                  "type": "string",
                                                  "description": "The upper bound for the filter."
                                                },
                                                "lowerStrict": {
                                                  "type": "boolean",
                                                  "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                                },
                                                "upperStrict": {
                                                  "type": "boolean",
                                                  "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                                }
                                              },
                                              "required": [
                                                "type",
                                                "dimension"
                                              ]
                                            },
                                            {
                                              "type": "object",
                                              "properties": {
                                                "dimension": {
                                                  "type": "string"
                                                }
                                              }
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  },
                                  "field": {
                                    "type": "object",
                                    "description": "A filter object. Used with \"not\" filter type.",
                                    "oneOf": [
                                      {
                                        "allOf": [
                                          {
                                            "title": "Selector filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "selector",
                                                "description": "This should always be \"selector\".",
                                                "enum": [
                                                  "selector"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "example": "$dimension",
                                                "description": "The dimension to filter on."
                                              },
                                              "value": {
                                                "type": "string",
                                                "example": "$value"
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string"
                                              },
                                              "value": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "allOf": [
                                          {
                                            "title": "In filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "example": "in",
                                                "description": "This should always be \"in\".",
                                                "enum": [
                                                  "in"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "example": "$dimension",
                                                "description": "The dimension to filter on."
                                              },
                                              "values": {
                                                "type": "array",
                                                "items": {
                                                  "type": "string",
                                                  "example": "example_dimension_value"
                                                }
                                              }
                                            }
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        ]
                                      },
                                      {
                                        "allOf": [
                                          {
                                            "title": "Bound filter"
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "description": "This should always be \"bound\".",
                                                "enum": [
                                                  "bound"
                                                ]
                                              },
                                              "dimension": {
                                                "type": "string",
                                                "description": "The dimension to filter on."
                                              },
                                              "ordering": {
                                                "type": "string",
                                                "description": "Specifies the sorting order to use when comparing values against the bound.\n",
                                                "enum": [
                                                  "lexicographic",
                                                  "alphanumeric",
                                                  "numeric",
                                                  "strlen"
                                                ]
                                              },
                                              "lower": {
                                                "type": "string",
                                                "description": "The lower bound for the filter."
                                              },
                                              "upper": {
                                                "type": "string",
                                                "description": "The upper bound for the filter."
                                              },
                                              "lowerStrict": {
                                                "type": "boolean",
                                                "description": "Perform strict comparison on the lower bound (\"<\" instead of \"<=\")."
                                              },
                                              "upperStrict": {
                                                "type": "boolean",
                                                "description": "Perform strict comparison on the upper bound (\">\" instead of \">=\")."
                                              }
                                            },
                                            "required": [
                                              "type",
                                              "dimension"
                                            ]
                                          },
                                          {
                                            "type": "object",
                                            "properties": {
                                              "dimension": {
                                                "type": "string"
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                }
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/vnd.salemove.v1+json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "timestamp": {
                        "type": "string",
                        "example": "017-02-20T00:00:00.000Z"
                      },
                      "operator_id": {
                        "type": "string",
                        "example": "c8b52f0b-ad05-4c71-8c98-5056f07c4d1a"
                      },
                      "seconds": {
                        "type": "integer",
                        "example": 9083
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests. Endpoint is rate limited and limit is exceeded. Endpoint was called more than 5 times in a\nsecond by the same user.\n"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
